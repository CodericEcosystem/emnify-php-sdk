<?php
/**
 * Apiv1tariffProfileTariff
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Model;

use \ArrayAccess;
use \Emnify\EmnifySdk\ObjectSerializer;

/**
 * Apiv1tariffProfileTariff Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class Apiv1tariffProfileTariff implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'apiv1tariff_profile_tariff';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'float',
        'organisation_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'created' => 'string',
        'tariff_status_id' => 'string',
        'currency_id' => 'string',
        'default_sms_mt_rate' => 'float',
        'default_sms_mo_rate' => 'float',
        'sim_issued_rate' => 'float',
        'sim_activated_rate' => 'float',
        'sim_suspended_rate' => 'float',
        'sim_activation_rate' => 'float',
        'sim_reactivation_rate' => 'float',
        'sim_suspension_rate' => 'float',
        'sim_termination_rate' => 'float',
        'data_throttle_id' => 'string',
        'data_blocksize_id' => 'string',
        'public' => 'string',
        'tariff_category_id' => 'string',
        'visibility_id' => 'string',
        'tariff_currency_category_id' => 'string',
        'used_count' => 'string',
        'assigned_count' => 'string',
        'currency' => '\Emnify\EmnifySdk\Model\Apiv1tariffProfileTariffCurrency'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'organisation_id' => null,
        'name' => null,
        'description' => null,
        'created' => null,
        'tariff_status_id' => null,
        'currency_id' => null,
        'default_sms_mt_rate' => null,
        'default_sms_mo_rate' => null,
        'sim_issued_rate' => null,
        'sim_activated_rate' => null,
        'sim_suspended_rate' => null,
        'sim_activation_rate' => null,
        'sim_reactivation_rate' => null,
        'sim_suspension_rate' => null,
        'sim_termination_rate' => null,
        'data_throttle_id' => null,
        'data_blocksize_id' => null,
        'public' => null,
        'tariff_category_id' => null,
        'visibility_id' => null,
        'tariff_currency_category_id' => null,
        'used_count' => null,
        'assigned_count' => null,
        'currency' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'organisation_id' => 'organisation_id',
        'name' => 'name',
        'description' => 'description',
        'created' => 'created',
        'tariff_status_id' => 'tariff_status_id',
        'currency_id' => 'currency_id',
        'default_sms_mt_rate' => 'default_sms_mt_rate',
        'default_sms_mo_rate' => 'default_sms_mo_rate',
        'sim_issued_rate' => 'sim_issued_rate',
        'sim_activated_rate' => 'sim_activated_rate',
        'sim_suspended_rate' => 'sim_suspended_rate',
        'sim_activation_rate' => 'sim_activation_rate',
        'sim_reactivation_rate' => 'sim_reactivation_rate',
        'sim_suspension_rate' => 'sim_suspension_rate',
        'sim_termination_rate' => 'sim_termination_rate',
        'data_throttle_id' => 'data_throttle_id',
        'data_blocksize_id' => 'data_blocksize_id',
        'public' => 'public',
        'tariff_category_id' => 'tariff_category_id',
        'visibility_id' => 'visibility_id',
        'tariff_currency_category_id' => 'tariff_currency_category_id',
        'used_count' => 'used_count',
        'assigned_count' => 'assigned_count',
        'currency' => 'currency'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'organisation_id' => 'setOrganisationId',
        'name' => 'setName',
        'description' => 'setDescription',
        'created' => 'setCreated',
        'tariff_status_id' => 'setTariffStatusId',
        'currency_id' => 'setCurrencyId',
        'default_sms_mt_rate' => 'setDefaultSmsMtRate',
        'default_sms_mo_rate' => 'setDefaultSmsMoRate',
        'sim_issued_rate' => 'setSimIssuedRate',
        'sim_activated_rate' => 'setSimActivatedRate',
        'sim_suspended_rate' => 'setSimSuspendedRate',
        'sim_activation_rate' => 'setSimActivationRate',
        'sim_reactivation_rate' => 'setSimReactivationRate',
        'sim_suspension_rate' => 'setSimSuspensionRate',
        'sim_termination_rate' => 'setSimTerminationRate',
        'data_throttle_id' => 'setDataThrottleId',
        'data_blocksize_id' => 'setDataBlocksizeId',
        'public' => 'setPublic',
        'tariff_category_id' => 'setTariffCategoryId',
        'visibility_id' => 'setVisibilityId',
        'tariff_currency_category_id' => 'setTariffCurrencyCategoryId',
        'used_count' => 'setUsedCount',
        'assigned_count' => 'setAssignedCount',
        'currency' => 'setCurrency'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'organisation_id' => 'getOrganisationId',
        'name' => 'getName',
        'description' => 'getDescription',
        'created' => 'getCreated',
        'tariff_status_id' => 'getTariffStatusId',
        'currency_id' => 'getCurrencyId',
        'default_sms_mt_rate' => 'getDefaultSmsMtRate',
        'default_sms_mo_rate' => 'getDefaultSmsMoRate',
        'sim_issued_rate' => 'getSimIssuedRate',
        'sim_activated_rate' => 'getSimActivatedRate',
        'sim_suspended_rate' => 'getSimSuspendedRate',
        'sim_activation_rate' => 'getSimActivationRate',
        'sim_reactivation_rate' => 'getSimReactivationRate',
        'sim_suspension_rate' => 'getSimSuspensionRate',
        'sim_termination_rate' => 'getSimTerminationRate',
        'data_throttle_id' => 'getDataThrottleId',
        'data_blocksize_id' => 'getDataBlocksizeId',
        'public' => 'getPublic',
        'tariff_category_id' => 'getTariffCategoryId',
        'visibility_id' => 'getVisibilityId',
        'tariff_currency_category_id' => 'getTariffCurrencyCategoryId',
        'used_count' => 'getUsedCount',
        'assigned_count' => 'getAssignedCount',
        'currency' => 'getCurrency'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['organisation_id'] = isset($data['organisation_id']) ? $data['organisation_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['tariff_status_id'] = isset($data['tariff_status_id']) ? $data['tariff_status_id'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['default_sms_mt_rate'] = isset($data['default_sms_mt_rate']) ? $data['default_sms_mt_rate'] : null;
        $this->container['default_sms_mo_rate'] = isset($data['default_sms_mo_rate']) ? $data['default_sms_mo_rate'] : null;
        $this->container['sim_issued_rate'] = isset($data['sim_issued_rate']) ? $data['sim_issued_rate'] : null;
        $this->container['sim_activated_rate'] = isset($data['sim_activated_rate']) ? $data['sim_activated_rate'] : null;
        $this->container['sim_suspended_rate'] = isset($data['sim_suspended_rate']) ? $data['sim_suspended_rate'] : null;
        $this->container['sim_activation_rate'] = isset($data['sim_activation_rate']) ? $data['sim_activation_rate'] : null;
        $this->container['sim_reactivation_rate'] = isset($data['sim_reactivation_rate']) ? $data['sim_reactivation_rate'] : null;
        $this->container['sim_suspension_rate'] = isset($data['sim_suspension_rate']) ? $data['sim_suspension_rate'] : null;
        $this->container['sim_termination_rate'] = isset($data['sim_termination_rate']) ? $data['sim_termination_rate'] : null;
        $this->container['data_throttle_id'] = isset($data['data_throttle_id']) ? $data['data_throttle_id'] : null;
        $this->container['data_blocksize_id'] = isset($data['data_blocksize_id']) ? $data['data_blocksize_id'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['tariff_category_id'] = isset($data['tariff_category_id']) ? $data['tariff_category_id'] : null;
        $this->container['visibility_id'] = isset($data['visibility_id']) ? $data['visibility_id'] : null;
        $this->container['tariff_currency_category_id'] = isset($data['tariff_currency_category_id']) ? $data['tariff_currency_category_id'] : null;
        $this->container['used_count'] = isset($data['used_count']) ? $data['used_count'] : null;
        $this->container['assigned_count'] = isset($data['assigned_count']) ? $data['assigned_count'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return float
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param float $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organisation_id
     *
     * @return string
     */
    public function getOrganisationId()
    {
        return $this->container['organisation_id'];
    }

    /**
     * Sets organisation_id
     *
     * @param string $organisation_id organisation_id
     *
     * @return $this
     */
    public function setOrganisationId($organisation_id)
    {
        $this->container['organisation_id'] = $organisation_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets tariff_status_id
     *
     * @return string
     */
    public function getTariffStatusId()
    {
        return $this->container['tariff_status_id'];
    }

    /**
     * Sets tariff_status_id
     *
     * @param string $tariff_status_id tariff_status_id
     *
     * @return $this
     */
    public function setTariffStatusId($tariff_status_id)
    {
        $this->container['tariff_status_id'] = $tariff_status_id;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets default_sms_mt_rate
     *
     * @return float
     */
    public function getDefaultSmsMtRate()
    {
        return $this->container['default_sms_mt_rate'];
    }

    /**
     * Sets default_sms_mt_rate
     *
     * @param float $default_sms_mt_rate default_sms_mt_rate
     *
     * @return $this
     */
    public function setDefaultSmsMtRate($default_sms_mt_rate)
    {
        $this->container['default_sms_mt_rate'] = $default_sms_mt_rate;

        return $this;
    }

    /**
     * Gets default_sms_mo_rate
     *
     * @return float
     */
    public function getDefaultSmsMoRate()
    {
        return $this->container['default_sms_mo_rate'];
    }

    /**
     * Sets default_sms_mo_rate
     *
     * @param float $default_sms_mo_rate default_sms_mo_rate
     *
     * @return $this
     */
    public function setDefaultSmsMoRate($default_sms_mo_rate)
    {
        $this->container['default_sms_mo_rate'] = $default_sms_mo_rate;

        return $this;
    }

    /**
     * Gets sim_issued_rate
     *
     * @return float
     */
    public function getSimIssuedRate()
    {
        return $this->container['sim_issued_rate'];
    }

    /**
     * Sets sim_issued_rate
     *
     * @param float $sim_issued_rate sim_issued_rate
     *
     * @return $this
     */
    public function setSimIssuedRate($sim_issued_rate)
    {
        $this->container['sim_issued_rate'] = $sim_issued_rate;

        return $this;
    }

    /**
     * Gets sim_activated_rate
     *
     * @return float
     */
    public function getSimActivatedRate()
    {
        return $this->container['sim_activated_rate'];
    }

    /**
     * Sets sim_activated_rate
     *
     * @param float $sim_activated_rate sim_activated_rate
     *
     * @return $this
     */
    public function setSimActivatedRate($sim_activated_rate)
    {
        $this->container['sim_activated_rate'] = $sim_activated_rate;

        return $this;
    }

    /**
     * Gets sim_suspended_rate
     *
     * @return float
     */
    public function getSimSuspendedRate()
    {
        return $this->container['sim_suspended_rate'];
    }

    /**
     * Sets sim_suspended_rate
     *
     * @param float $sim_suspended_rate sim_suspended_rate
     *
     * @return $this
     */
    public function setSimSuspendedRate($sim_suspended_rate)
    {
        $this->container['sim_suspended_rate'] = $sim_suspended_rate;

        return $this;
    }

    /**
     * Gets sim_activation_rate
     *
     * @return float
     */
    public function getSimActivationRate()
    {
        return $this->container['sim_activation_rate'];
    }

    /**
     * Sets sim_activation_rate
     *
     * @param float $sim_activation_rate sim_activation_rate
     *
     * @return $this
     */
    public function setSimActivationRate($sim_activation_rate)
    {
        $this->container['sim_activation_rate'] = $sim_activation_rate;

        return $this;
    }

    /**
     * Gets sim_reactivation_rate
     *
     * @return float
     */
    public function getSimReactivationRate()
    {
        return $this->container['sim_reactivation_rate'];
    }

    /**
     * Sets sim_reactivation_rate
     *
     * @param float $sim_reactivation_rate sim_reactivation_rate
     *
     * @return $this
     */
    public function setSimReactivationRate($sim_reactivation_rate)
    {
        $this->container['sim_reactivation_rate'] = $sim_reactivation_rate;

        return $this;
    }

    /**
     * Gets sim_suspension_rate
     *
     * @return float
     */
    public function getSimSuspensionRate()
    {
        return $this->container['sim_suspension_rate'];
    }

    /**
     * Sets sim_suspension_rate
     *
     * @param float $sim_suspension_rate sim_suspension_rate
     *
     * @return $this
     */
    public function setSimSuspensionRate($sim_suspension_rate)
    {
        $this->container['sim_suspension_rate'] = $sim_suspension_rate;

        return $this;
    }

    /**
     * Gets sim_termination_rate
     *
     * @return float
     */
    public function getSimTerminationRate()
    {
        return $this->container['sim_termination_rate'];
    }

    /**
     * Sets sim_termination_rate
     *
     * @param float $sim_termination_rate sim_termination_rate
     *
     * @return $this
     */
    public function setSimTerminationRate($sim_termination_rate)
    {
        $this->container['sim_termination_rate'] = $sim_termination_rate;

        return $this;
    }

    /**
     * Gets data_throttle_id
     *
     * @return string
     */
    public function getDataThrottleId()
    {
        return $this->container['data_throttle_id'];
    }

    /**
     * Sets data_throttle_id
     *
     * @param string $data_throttle_id data_throttle_id
     *
     * @return $this
     */
    public function setDataThrottleId($data_throttle_id)
    {
        $this->container['data_throttle_id'] = $data_throttle_id;

        return $this;
    }

    /**
     * Gets data_blocksize_id
     *
     * @return string
     */
    public function getDataBlocksizeId()
    {
        return $this->container['data_blocksize_id'];
    }

    /**
     * Sets data_blocksize_id
     *
     * @param string $data_blocksize_id data_blocksize_id
     *
     * @return $this
     */
    public function setDataBlocksizeId($data_blocksize_id)
    {
        $this->container['data_blocksize_id'] = $data_blocksize_id;

        return $this;
    }

    /**
     * Gets public
     *
     * @return string
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param string $public public
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets tariff_category_id
     *
     * @return string
     */
    public function getTariffCategoryId()
    {
        return $this->container['tariff_category_id'];
    }

    /**
     * Sets tariff_category_id
     *
     * @param string $tariff_category_id tariff_category_id
     *
     * @return $this
     */
    public function setTariffCategoryId($tariff_category_id)
    {
        $this->container['tariff_category_id'] = $tariff_category_id;

        return $this;
    }

    /**
     * Gets visibility_id
     *
     * @return string
     */
    public function getVisibilityId()
    {
        return $this->container['visibility_id'];
    }

    /**
     * Sets visibility_id
     *
     * @param string $visibility_id visibility_id
     *
     * @return $this
     */
    public function setVisibilityId($visibility_id)
    {
        $this->container['visibility_id'] = $visibility_id;

        return $this;
    }

    /**
     * Gets tariff_currency_category_id
     *
     * @return string
     */
    public function getTariffCurrencyCategoryId()
    {
        return $this->container['tariff_currency_category_id'];
    }

    /**
     * Sets tariff_currency_category_id
     *
     * @param string $tariff_currency_category_id tariff_currency_category_id
     *
     * @return $this
     */
    public function setTariffCurrencyCategoryId($tariff_currency_category_id)
    {
        $this->container['tariff_currency_category_id'] = $tariff_currency_category_id;

        return $this;
    }

    /**
     * Gets used_count
     *
     * @return string
     */
    public function getUsedCount()
    {
        return $this->container['used_count'];
    }

    /**
     * Sets used_count
     *
     * @param string $used_count used_count
     *
     * @return $this
     */
    public function setUsedCount($used_count)
    {
        $this->container['used_count'] = $used_count;

        return $this;
    }

    /**
     * Gets assigned_count
     *
     * @return string
     */
    public function getAssignedCount()
    {
        return $this->container['assigned_count'];
    }

    /**
     * Sets assigned_count
     *
     * @param string $assigned_count assigned_count
     *
     * @return $this
     */
    public function setAssignedCount($assigned_count)
    {
        $this->container['assigned_count'] = $assigned_count;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Emnify\EmnifySdk\Model\Apiv1tariffProfileTariffCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Emnify\EmnifySdk\Model\Apiv1tariffProfileTariffCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
