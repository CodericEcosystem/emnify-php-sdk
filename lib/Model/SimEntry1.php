<?php
/**
 * SimEntry1
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Model;

use \ArrayAccess;
use \Emnify\EmnifySdk\ObjectSerializer;

/**
 * SimEntry1 Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class SimEntry1 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Sim Entry_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'iccid' => 'string',
        'eid' => 'string',
        'production_date' => '\DateTime',
        'activation_date' => '\DateTime',
        'status' => '\Emnify\EmnifySdk\Model\Status',
        'customer_org' => '\Emnify\EmnifySdk\Model\Apiv1simCustomerOrg',
        'issuer_org' => '\Emnify\EmnifySdk\Model\Apiv1simCustomerOrg',
        'reseller_org' => '\Emnify\EmnifySdk\Model\Apiv1simCustomerOrg',
        'endpoint' => '\Emnify\EmnifySdk\Model\HasId',
        'imsi' => 'string',
        'msisdn' => 'string',
        'model' => '\Emnify\EmnifySdk\Model\SimModel'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'iccid' => null,
        'eid' => null,
        'production_date' => 'date-time',
        'activation_date' => 'date-time',
        'status' => null,
        'customer_org' => null,
        'issuer_org' => null,
        'reseller_org' => null,
        'endpoint' => null,
        'imsi' => null,
        'msisdn' => null,
        'model' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'iccid' => 'iccid',
        'eid' => 'eid',
        'production_date' => 'production_date',
        'activation_date' => 'activation_date',
        'status' => 'status',
        'customer_org' => 'customer_org',
        'issuer_org' => 'issuer_org',
        'reseller_org' => 'reseller_org',
        'endpoint' => 'endpoint',
        'imsi' => 'imsi',
        'msisdn' => 'msisdn',
        'model' => 'model'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'iccid' => 'setIccid',
        'eid' => 'setEid',
        'production_date' => 'setProductionDate',
        'activation_date' => 'setActivationDate',
        'status' => 'setStatus',
        'customer_org' => 'setCustomerOrg',
        'issuer_org' => 'setIssuerOrg',
        'reseller_org' => 'setResellerOrg',
        'endpoint' => 'setEndpoint',
        'imsi' => 'setImsi',
        'msisdn' => 'setMsisdn',
        'model' => 'setModel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'iccid' => 'getIccid',
        'eid' => 'getEid',
        'production_date' => 'getProductionDate',
        'activation_date' => 'getActivationDate',
        'status' => 'getStatus',
        'customer_org' => 'getCustomerOrg',
        'issuer_org' => 'getIssuerOrg',
        'reseller_org' => 'getResellerOrg',
        'endpoint' => 'getEndpoint',
        'imsi' => 'getImsi',
        'msisdn' => 'getMsisdn',
        'model' => 'getModel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['iccid'] = isset($data['iccid']) ? $data['iccid'] : null;
        $this->container['eid'] = isset($data['eid']) ? $data['eid'] : null;
        $this->container['production_date'] = isset($data['production_date']) ? $data['production_date'] : null;
        $this->container['activation_date'] = isset($data['activation_date']) ? $data['activation_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['customer_org'] = isset($data['customer_org']) ? $data['customer_org'] : null;
        $this->container['issuer_org'] = isset($data['issuer_org']) ? $data['issuer_org'] : null;
        $this->container['reseller_org'] = isset($data['reseller_org']) ? $data['reseller_org'] : null;
        $this->container['endpoint'] = isset($data['endpoint']) ? $data['endpoint'] : null;
        $this->container['imsi'] = isset($data['imsi']) ? $data['imsi'] : null;
        $this->container['msisdn'] = isset($data['msisdn']) ? $data['msisdn'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets iccid
     *
     * @return string
     */
    public function getIccid()
    {
        return $this->container['iccid'];
    }

    /**
     * Sets iccid
     *
     * @param string $iccid iccid
     *
     * @return $this
     */
    public function setIccid($iccid)
    {
        $this->container['iccid'] = $iccid;

        return $this;
    }

    /**
     * Gets eid
     *
     * @return string
     */
    public function getEid()
    {
        return $this->container['eid'];
    }

    /**
     * Sets eid
     *
     * @param string $eid eid
     *
     * @return $this
     */
    public function setEid($eid)
    {
        $this->container['eid'] = $eid;

        return $this;
    }

    /**
     * Gets production_date
     *
     * @return \DateTime
     */
    public function getProductionDate()
    {
        return $this->container['production_date'];
    }

    /**
     * Sets production_date
     *
     * @param \DateTime $production_date production_date
     *
     * @return $this
     */
    public function setProductionDate($production_date)
    {
        $this->container['production_date'] = $production_date;

        return $this;
    }

    /**
     * Gets activation_date
     *
     * @return \DateTime
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param \DateTime $activation_date activation_date
     *
     * @return $this
     */
    public function setActivationDate($activation_date)
    {
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Emnify\EmnifySdk\Model\Status
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Emnify\EmnifySdk\Model\Status $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets customer_org
     *
     * @return \Emnify\EmnifySdk\Model\Apiv1simCustomerOrg
     */
    public function getCustomerOrg()
    {
        return $this->container['customer_org'];
    }

    /**
     * Sets customer_org
     *
     * @param \Emnify\EmnifySdk\Model\Apiv1simCustomerOrg $customer_org customer_org
     *
     * @return $this
     */
    public function setCustomerOrg($customer_org)
    {
        $this->container['customer_org'] = $customer_org;

        return $this;
    }

    /**
     * Gets issuer_org
     *
     * @return \Emnify\EmnifySdk\Model\Apiv1simCustomerOrg
     */
    public function getIssuerOrg()
    {
        return $this->container['issuer_org'];
    }

    /**
     * Sets issuer_org
     *
     * @param \Emnify\EmnifySdk\Model\Apiv1simCustomerOrg $issuer_org issuer_org
     *
     * @return $this
     */
    public function setIssuerOrg($issuer_org)
    {
        $this->container['issuer_org'] = $issuer_org;

        return $this;
    }

    /**
     * Gets reseller_org
     *
     * @return \Emnify\EmnifySdk\Model\Apiv1simCustomerOrg
     */
    public function getResellerOrg()
    {
        return $this->container['reseller_org'];
    }

    /**
     * Sets reseller_org
     *
     * @param \Emnify\EmnifySdk\Model\Apiv1simCustomerOrg $reseller_org reseller_org
     *
     * @return $this
     */
    public function setResellerOrg($reseller_org)
    {
        $this->container['reseller_org'] = $reseller_org;

        return $this;
    }

    /**
     * Gets endpoint
     *
     * @return \Emnify\EmnifySdk\Model\HasId
     */
    public function getEndpoint()
    {
        return $this->container['endpoint'];
    }

    /**
     * Sets endpoint
     *
     * @param \Emnify\EmnifySdk\Model\HasId $endpoint endpoint
     *
     * @return $this
     */
    public function setEndpoint($endpoint)
    {
        $this->container['endpoint'] = $endpoint;

        return $this;
    }

    /**
     * Gets imsi
     *
     * @return string
     */
    public function getImsi()
    {
        return $this->container['imsi'];
    }

    /**
     * Sets imsi
     *
     * @param string $imsi imsi
     *
     * @return $this
     */
    public function setImsi($imsi)
    {
        $this->container['imsi'] = $imsi;

        return $this;
    }

    /**
     * Gets msisdn
     *
     * @return string
     */
    public function getMsisdn()
    {
        return $this->container['msisdn'];
    }

    /**
     * Sets msisdn
     *
     * @param string $msisdn msisdn
     *
     * @return $this
     */
    public function setMsisdn($msisdn)
    {
        $this->container['msisdn'] = $msisdn;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \Emnify\EmnifySdk\Model\SimModel
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \Emnify\EmnifySdk\Model\SimModel $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
