<?php
/**
 * InlineResponse200
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Model;

use \ArrayAccess;
use \Emnify\EmnifySdk\ObjectSerializer;

/**
 * InlineResponse200 Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class InlineResponse200 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'organisation_type_id' => 'string',
        'country_id' => 'string',
        'organisation_status_id' => 'string',
        'ext_reference' => 'string',
        'monthly_cost_limit' => 'string',
        'currency_id' => 'int',
        'organisation_class_id' => 'int',
        'created' => '\DateTime',
        'verification_type_id' => 'string',
        'verification' => 'string',
        'brand_id' => 'string',
        'default_sms_routing_id' => 'string',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'organisation_type_id' => null,
        'country_id' => null,
        'organisation_status_id' => null,
        'ext_reference' => null,
        'monthly_cost_limit' => null,
        'currency_id' => null,
        'organisation_class_id' => null,
        'created' => 'date-time',
        'verification_type_id' => null,
        'verification' => null,
        'brand_id' => null,
        'default_sms_routing_id' => null,
        'id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'organisation_type_id' => 'organisation_type_id',
        'country_id' => 'country_id',
        'organisation_status_id' => 'organisation_status_id',
        'ext_reference' => 'ext_reference',
        'monthly_cost_limit' => 'monthly_cost_limit',
        'currency_id' => 'currency_id',
        'organisation_class_id' => 'organisation_class_id',
        'created' => 'created',
        'verification_type_id' => 'verification_type_id',
        'verification' => 'verification',
        'brand_id' => 'brand_id',
        'default_sms_routing_id' => 'default_sms_routing_id',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'organisation_type_id' => 'setOrganisationTypeId',
        'country_id' => 'setCountryId',
        'organisation_status_id' => 'setOrganisationStatusId',
        'ext_reference' => 'setExtReference',
        'monthly_cost_limit' => 'setMonthlyCostLimit',
        'currency_id' => 'setCurrencyId',
        'organisation_class_id' => 'setOrganisationClassId',
        'created' => 'setCreated',
        'verification_type_id' => 'setVerificationTypeId',
        'verification' => 'setVerification',
        'brand_id' => 'setBrandId',
        'default_sms_routing_id' => 'setDefaultSmsRoutingId',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'organisation_type_id' => 'getOrganisationTypeId',
        'country_id' => 'getCountryId',
        'organisation_status_id' => 'getOrganisationStatusId',
        'ext_reference' => 'getExtReference',
        'monthly_cost_limit' => 'getMonthlyCostLimit',
        'currency_id' => 'getCurrencyId',
        'organisation_class_id' => 'getOrganisationClassId',
        'created' => 'getCreated',
        'verification_type_id' => 'getVerificationTypeId',
        'verification' => 'getVerification',
        'brand_id' => 'getBrandId',
        'default_sms_routing_id' => 'getDefaultSmsRoutingId',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['organisation_type_id'] = isset($data['organisation_type_id']) ? $data['organisation_type_id'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['organisation_status_id'] = isset($data['organisation_status_id']) ? $data['organisation_status_id'] : null;
        $this->container['ext_reference'] = isset($data['ext_reference']) ? $data['ext_reference'] : null;
        $this->container['monthly_cost_limit'] = isset($data['monthly_cost_limit']) ? $data['monthly_cost_limit'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['organisation_class_id'] = isset($data['organisation_class_id']) ? $data['organisation_class_id'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['verification_type_id'] = isset($data['verification_type_id']) ? $data['verification_type_id'] : null;
        $this->container['verification'] = isset($data['verification']) ? $data['verification'] : null;
        $this->container['brand_id'] = isset($data['brand_id']) ? $data['brand_id'] : null;
        $this->container['default_sms_routing_id'] = isset($data['default_sms_routing_id']) ? $data['default_sms_routing_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets organisation_type_id
     *
     * @return string
     */
    public function getOrganisationTypeId()
    {
        return $this->container['organisation_type_id'];
    }

    /**
     * Sets organisation_type_id
     *
     * @param string $organisation_type_id organisation_type_id
     *
     * @return $this
     */
    public function setOrganisationTypeId($organisation_type_id)
    {
        $this->container['organisation_type_id'] = $organisation_type_id;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string $country_id country_id
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets organisation_status_id
     *
     * @return string
     */
    public function getOrganisationStatusId()
    {
        return $this->container['organisation_status_id'];
    }

    /**
     * Sets organisation_status_id
     *
     * @param string $organisation_status_id organisation_status_id
     *
     * @return $this
     */
    public function setOrganisationStatusId($organisation_status_id)
    {
        $this->container['organisation_status_id'] = $organisation_status_id;

        return $this;
    }

    /**
     * Gets ext_reference
     *
     * @return string
     */
    public function getExtReference()
    {
        return $this->container['ext_reference'];
    }

    /**
     * Sets ext_reference
     *
     * @param string $ext_reference ext_reference
     *
     * @return $this
     */
    public function setExtReference($ext_reference)
    {
        $this->container['ext_reference'] = $ext_reference;

        return $this;
    }

    /**
     * Gets monthly_cost_limit
     *
     * @return string
     */
    public function getMonthlyCostLimit()
    {
        return $this->container['monthly_cost_limit'];
    }

    /**
     * Sets monthly_cost_limit
     *
     * @param string $monthly_cost_limit monthly_cost_limit
     *
     * @return $this
     */
    public function setMonthlyCostLimit($monthly_cost_limit)
    {
        $this->container['monthly_cost_limit'] = $monthly_cost_limit;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets organisation_class_id
     *
     * @return int
     */
    public function getOrganisationClassId()
    {
        return $this->container['organisation_class_id'];
    }

    /**
     * Sets organisation_class_id
     *
     * @param int $organisation_class_id organisation_class_id
     *
     * @return $this
     */
    public function setOrganisationClassId($organisation_class_id)
    {
        $this->container['organisation_class_id'] = $organisation_class_id;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets verification_type_id
     *
     * @return string
     */
    public function getVerificationTypeId()
    {
        return $this->container['verification_type_id'];
    }

    /**
     * Sets verification_type_id
     *
     * @param string $verification_type_id verification_type_id
     *
     * @return $this
     */
    public function setVerificationTypeId($verification_type_id)
    {
        $this->container['verification_type_id'] = $verification_type_id;

        return $this;
    }

    /**
     * Gets verification
     *
     * @return string
     */
    public function getVerification()
    {
        return $this->container['verification'];
    }

    /**
     * Sets verification
     *
     * @param string $verification verification
     *
     * @return $this
     */
    public function setVerification($verification)
    {
        $this->container['verification'] = $verification;

        return $this;
    }

    /**
     * Gets brand_id
     *
     * @return string
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     *
     * @param string $brand_id brand_id
     *
     * @return $this
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets default_sms_routing_id
     *
     * @return string
     */
    public function getDefaultSmsRoutingId()
    {
        return $this->container['default_sms_routing_id'];
    }

    /**
     * Sets default_sms_routing_id
     *
     * @param string $default_sms_routing_id default_sms_routing_id
     *
     * @return $this
     */
    public function setDefaultSmsRoutingId($default_sms_routing_id)
    {
        $this->container['default_sms_routing_id'] = $default_sms_routing_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
