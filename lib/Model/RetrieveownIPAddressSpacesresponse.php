<?php
/**
 * RetrieveownIPAddressSpacesresponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Model;

use \ArrayAccess;
use \Emnify\EmnifySdk\ObjectSerializer;

/**
 * RetrieveownIPAddressSpacesresponse Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class RetrieveownIPAddressSpacesresponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RetrieveownIPAddressSpacesresponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'ip_address_space' => 'string',
        'ip_address_version' => 'int',
        'used_count' => 'int',
        'available_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'ip_address_space' => null,
        'ip_address_version' => 'int32',
        'used_count' => 'int32',
        'available_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'ip_address_space' => 'ip_address_space',
        'ip_address_version' => 'ip_address_version',
        'used_count' => 'used_count',
        'available_count' => 'available_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'ip_address_space' => 'setIpAddressSpace',
        'ip_address_version' => 'setIpAddressVersion',
        'used_count' => 'setUsedCount',
        'available_count' => 'setAvailableCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'ip_address_space' => 'getIpAddressSpace',
        'ip_address_version' => 'getIpAddressVersion',
        'used_count' => 'getUsedCount',
        'available_count' => 'getAvailableCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['ip_address_space'] = isset($data['ip_address_space']) ? $data['ip_address_space'] : null;
        $this->container['ip_address_version'] = isset($data['ip_address_version']) ? $data['ip_address_version'] : null;
        $this->container['used_count'] = isset($data['used_count']) ? $data['used_count'] : null;
        $this->container['available_count'] = isset($data['available_count']) ? $data['available_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets ip_address_space
     *
     * @return string
     */
    public function getIpAddressSpace()
    {
        return $this->container['ip_address_space'];
    }

    /**
     * Sets ip_address_space
     *
     * @param string $ip_address_space ip_address_space
     *
     * @return $this
     */
    public function setIpAddressSpace($ip_address_space)
    {
        $this->container['ip_address_space'] = $ip_address_space;

        return $this;
    }

    /**
     * Gets ip_address_version
     *
     * @return int
     */
    public function getIpAddressVersion()
    {
        return $this->container['ip_address_version'];
    }

    /**
     * Sets ip_address_version
     *
     * @param int $ip_address_version ip_address_version
     *
     * @return $this
     */
    public function setIpAddressVersion($ip_address_version)
    {
        $this->container['ip_address_version'] = $ip_address_version;

        return $this;
    }

    /**
     * Gets used_count
     *
     * @return int
     */
    public function getUsedCount()
    {
        return $this->container['used_count'];
    }

    /**
     * Sets used_count
     *
     * @param int $used_count used_count
     *
     * @return $this
     */
    public function setUsedCount($used_count)
    {
        $this->container['used_count'] = $used_count;

        return $this;
    }

    /**
     * Gets available_count
     *
     * @return int
     */
    public function getAvailableCount()
    {
        return $this->container['available_count'];
    }

    /**
     * Sets available_count
     *
     * @param int $available_count available_count
     *
     * @return $this
     */
    public function setAvailableCount($available_count)
    {
        $this->container['available_count'] = $available_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
