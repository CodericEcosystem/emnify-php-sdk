<?php
/**
 * InlineResponse20010
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Model;

use \ArrayAccess;
use \Emnify\EmnifySdk\ObjectSerializer;

/**
 * InlineResponse20010 Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class InlineResponse20010 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_10';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'user_id' => 'int',
        'creation_date' => 'string',
        'accept_attachment_expiry_date' => 'string',
        'termination_date' => 'string',
        'aws_transit_gateway_attachment_id' => 'string',
        'aws_vpn_connection_id' => 'string',
        'status' => '\Emnify\EmnifySdk\Model\Apiv1cncbreakoutStatus',
        'type' => '\Emnify\EmnifySdk\Model\Apiv1cncbreakoutStatus',
        'region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'user_id' => null,
        'creation_date' => null,
        'accept_attachment_expiry_date' => null,
        'termination_date' => null,
        'aws_transit_gateway_attachment_id' => null,
        'aws_vpn_connection_id' => null,
        'status' => null,
        'type' => null,
        'region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'user_id' => 'user_id',
        'creation_date' => 'creation_date',
        'accept_attachment_expiry_date' => 'accept_attachment_expiry_date',
        'termination_date' => 'termination_date',
        'aws_transit_gateway_attachment_id' => 'aws_transit_gateway_attachment_id',
        'aws_vpn_connection_id' => 'aws_vpn_connection_id',
        'status' => 'status',
        'type' => 'type',
        'region' => 'region'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'user_id' => 'setUserId',
        'creation_date' => 'setCreationDate',
        'accept_attachment_expiry_date' => 'setAcceptAttachmentExpiryDate',
        'termination_date' => 'setTerminationDate',
        'aws_transit_gateway_attachment_id' => 'setAwsTransitGatewayAttachmentId',
        'aws_vpn_connection_id' => 'setAwsVpnConnectionId',
        'status' => 'setStatus',
        'type' => 'setType',
        'region' => 'setRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'user_id' => 'getUserId',
        'creation_date' => 'getCreationDate',
        'accept_attachment_expiry_date' => 'getAcceptAttachmentExpiryDate',
        'termination_date' => 'getTerminationDate',
        'aws_transit_gateway_attachment_id' => 'getAwsTransitGatewayAttachmentId',
        'aws_vpn_connection_id' => 'getAwsVpnConnectionId',
        'status' => 'getStatus',
        'type' => 'getType',
        'region' => 'getRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['accept_attachment_expiry_date'] = isset($data['accept_attachment_expiry_date']) ? $data['accept_attachment_expiry_date'] : null;
        $this->container['termination_date'] = isset($data['termination_date']) ? $data['termination_date'] : null;
        $this->container['aws_transit_gateway_attachment_id'] = isset($data['aws_transit_gateway_attachment_id']) ? $data['aws_transit_gateway_attachment_id'] : null;
        $this->container['aws_vpn_connection_id'] = isset($data['aws_vpn_connection_id']) ? $data['aws_vpn_connection_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param string $creation_date The date this attachment was created in UTC
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets accept_attachment_expiry_date
     *
     * @return string
     */
    public function getAcceptAttachmentExpiryDate()
    {
        return $this->container['accept_attachment_expiry_date'];
    }

    /**
     * Sets accept_attachment_expiry_date
     *
     * @param string $accept_attachment_expiry_date The expiry date of the accept attachment state in UTC. This will only be returned if the breakout is of type `Transit Gateway (type_id: 1)` and in Status `Pending AWS Actvation (status_id: 2)`
     *
     * @return $this
     */
    public function setAcceptAttachmentExpiryDate($accept_attachment_expiry_date)
    {
        $this->container['accept_attachment_expiry_date'] = $accept_attachment_expiry_date;

        return $this;
    }

    /**
     * Gets termination_date
     *
     * @return string
     */
    public function getTerminationDate()
    {
        return $this->container['termination_date'];
    }

    /**
     * Sets termination_date
     *
     * @param string $termination_date termination_date
     *
     * @return $this
     */
    public function setTerminationDate($termination_date)
    {
        $this->container['termination_date'] = $termination_date;

        return $this;
    }

    /**
     * Gets aws_transit_gateway_attachment_id
     *
     * @return string
     */
    public function getAwsTransitGatewayAttachmentId()
    {
        return $this->container['aws_transit_gateway_attachment_id'];
    }

    /**
     * Sets aws_transit_gateway_attachment_id
     *
     * @param string $aws_transit_gateway_attachment_id aws_transit_gateway_attachment_id
     *
     * @return $this
     */
    public function setAwsTransitGatewayAttachmentId($aws_transit_gateway_attachment_id)
    {
        $this->container['aws_transit_gateway_attachment_id'] = $aws_transit_gateway_attachment_id;

        return $this;
    }

    /**
     * Gets aws_vpn_connection_id
     *
     * @return string
     */
    public function getAwsVpnConnectionId()
    {
        return $this->container['aws_vpn_connection_id'];
    }

    /**
     * Sets aws_vpn_connection_id
     *
     * @param string $aws_vpn_connection_id This is only set when the breakout is a VPN attachment
     *
     * @return $this
     */
    public function setAwsVpnConnectionId($aws_vpn_connection_id)
    {
        $this->container['aws_vpn_connection_id'] = $aws_vpn_connection_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Emnify\EmnifySdk\Model\Apiv1cncbreakoutStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Emnify\EmnifySdk\Model\Apiv1cncbreakoutStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Emnify\EmnifySdk\Model\Apiv1cncbreakoutStatus
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Emnify\EmnifySdk\Model\Apiv1cncbreakoutStatus $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region The customer region that this attachment belongs to
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
