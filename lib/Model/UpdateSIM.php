<?php
/**
 * UpdateSIM
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Model;

use \ArrayAccess;
use \Emnify\EmnifySdk\ObjectSerializer;

/**
 * UpdateSIM Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class UpdateSIM implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateSIM';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'issuer_org' => '\Emnify\EmnifySdk\Model\HasId',
        'reseller_org' => '\Emnify\EmnifySdk\Model\HasId',
        'customer_org' => '\Emnify\EmnifySdk\Model\HasId',
        'status' => '\Emnify\EmnifySdk\Model\Status'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'issuer_org' => null,
        'reseller_org' => null,
        'customer_org' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'issuer_org' => 'issuer_org',
        'reseller_org' => 'reseller_org',
        'customer_org' => 'customer_org',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'issuer_org' => 'setIssuerOrg',
        'reseller_org' => 'setResellerOrg',
        'customer_org' => 'setCustomerOrg',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'issuer_org' => 'getIssuerOrg',
        'reseller_org' => 'getResellerOrg',
        'customer_org' => 'getCustomerOrg',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['issuer_org'] = isset($data['issuer_org']) ? $data['issuer_org'] : null;
        $this->container['reseller_org'] = isset($data['reseller_org']) ? $data['reseller_org'] : null;
        $this->container['customer_org'] = isset($data['customer_org']) ? $data['customer_org'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['issuer_org'] === null) {
            $invalidProperties[] = "'issuer_org' can't be null";
        }
        if ($this->container['reseller_org'] === null) {
            $invalidProperties[] = "'reseller_org' can't be null";
        }
        if ($this->container['customer_org'] === null) {
            $invalidProperties[] = "'customer_org' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets issuer_org
     *
     * @return \Emnify\EmnifySdk\Model\HasId
     */
    public function getIssuerOrg()
    {
        return $this->container['issuer_org'];
    }

    /**
     * Sets issuer_org
     *
     * @param \Emnify\EmnifySdk\Model\HasId $issuer_org issuer_org
     *
     * @return $this
     */
    public function setIssuerOrg($issuer_org)
    {
        $this->container['issuer_org'] = $issuer_org;

        return $this;
    }

    /**
     * Gets reseller_org
     *
     * @return \Emnify\EmnifySdk\Model\HasId
     */
    public function getResellerOrg()
    {
        return $this->container['reseller_org'];
    }

    /**
     * Sets reseller_org
     *
     * @param \Emnify\EmnifySdk\Model\HasId $reseller_org reseller_org
     *
     * @return $this
     */
    public function setResellerOrg($reseller_org)
    {
        $this->container['reseller_org'] = $reseller_org;

        return $this;
    }

    /**
     * Gets customer_org
     *
     * @return \Emnify\EmnifySdk\Model\HasId
     */
    public function getCustomerOrg()
    {
        return $this->container['customer_org'];
    }

    /**
     * Sets customer_org
     *
     * @param \Emnify\EmnifySdk\Model\HasId $customer_org customer_org
     *
     * @return $this
     */
    public function setCustomerOrg($customer_org)
    {
        $this->container['customer_org'] = $customer_org;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Emnify\EmnifySdk\Model\Status
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Emnify\EmnifySdk\Model\Status $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
