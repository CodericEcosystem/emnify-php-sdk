<?php
/**
 * GetMonthlyOrganisationStatsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Model;

use \ArrayAccess;
use \Emnify\EmnifySdk\ObjectSerializer;

/**
 * GetMonthlyOrganisationStatsResponse Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class GetMonthlyOrganisationStatsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Get monthly organisation stats response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_month' => '\Emnify\EmnifySdk\Model\OrganisationTrafficStatisticsMonthObject',
        'last_month' => '\Emnify\EmnifySdk\Model\OrganisationTrafficStatisticsMonthObject',
        'sim' => '\Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponseSim',
        'service_profiles' => 'float',
        'tariff_profiles' => 'float',
        'users' => 'float',
        'active_chargeable_sims' => 'float',
        'hosting_fees' => 'float',
        'inclusive_volume' => '\Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponseInclusiveVolume',
        'prepaid_balance' => '\Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponsePrepaidBalance'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'current_month' => null,
        'last_month' => null,
        'sim' => null,
        'service_profiles' => null,
        'tariff_profiles' => null,
        'users' => null,
        'active_chargeable_sims' => null,
        'hosting_fees' => null,
        'inclusive_volume' => null,
        'prepaid_balance' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_month' => 'current_month',
        'last_month' => 'last_month',
        'sim' => 'sim',
        'service_profiles' => 'service_profiles',
        'tariff_profiles' => 'tariff_profiles',
        'users' => 'users',
        'active_chargeable_sims' => 'active_chargeable_sims',
        'hosting_fees' => 'hosting_fees',
        'inclusive_volume' => 'inclusive_volume',
        'prepaid_balance' => 'prepaid_balance'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_month' => 'setCurrentMonth',
        'last_month' => 'setLastMonth',
        'sim' => 'setSim',
        'service_profiles' => 'setServiceProfiles',
        'tariff_profiles' => 'setTariffProfiles',
        'users' => 'setUsers',
        'active_chargeable_sims' => 'setActiveChargeableSims',
        'hosting_fees' => 'setHostingFees',
        'inclusive_volume' => 'setInclusiveVolume',
        'prepaid_balance' => 'setPrepaidBalance'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_month' => 'getCurrentMonth',
        'last_month' => 'getLastMonth',
        'sim' => 'getSim',
        'service_profiles' => 'getServiceProfiles',
        'tariff_profiles' => 'getTariffProfiles',
        'users' => 'getUsers',
        'active_chargeable_sims' => 'getActiveChargeableSims',
        'hosting_fees' => 'getHostingFees',
        'inclusive_volume' => 'getInclusiveVolume',
        'prepaid_balance' => 'getPrepaidBalance'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_month'] = isset($data['current_month']) ? $data['current_month'] : null;
        $this->container['last_month'] = isset($data['last_month']) ? $data['last_month'] : null;
        $this->container['sim'] = isset($data['sim']) ? $data['sim'] : null;
        $this->container['service_profiles'] = isset($data['service_profiles']) ? $data['service_profiles'] : null;
        $this->container['tariff_profiles'] = isset($data['tariff_profiles']) ? $data['tariff_profiles'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['active_chargeable_sims'] = isset($data['active_chargeable_sims']) ? $data['active_chargeable_sims'] : null;
        $this->container['hosting_fees'] = isset($data['hosting_fees']) ? $data['hosting_fees'] : null;
        $this->container['inclusive_volume'] = isset($data['inclusive_volume']) ? $data['inclusive_volume'] : null;
        $this->container['prepaid_balance'] = isset($data['prepaid_balance']) ? $data['prepaid_balance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_month
     *
     * @return \Emnify\EmnifySdk\Model\OrganisationTrafficStatisticsMonthObject
     */
    public function getCurrentMonth()
    {
        return $this->container['current_month'];
    }

    /**
     * Sets current_month
     *
     * @param \Emnify\EmnifySdk\Model\OrganisationTrafficStatisticsMonthObject $current_month current_month
     *
     * @return $this
     */
    public function setCurrentMonth($current_month)
    {
        $this->container['current_month'] = $current_month;

        return $this;
    }

    /**
     * Gets last_month
     *
     * @return \Emnify\EmnifySdk\Model\OrganisationTrafficStatisticsMonthObject
     */
    public function getLastMonth()
    {
        return $this->container['last_month'];
    }

    /**
     * Sets last_month
     *
     * @param \Emnify\EmnifySdk\Model\OrganisationTrafficStatisticsMonthObject $last_month last_month
     *
     * @return $this
     */
    public function setLastMonth($last_month)
    {
        $this->container['last_month'] = $last_month;

        return $this;
    }

    /**
     * Gets sim
     *
     * @return \Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponseSim
     */
    public function getSim()
    {
        return $this->container['sim'];
    }

    /**
     * Sets sim
     *
     * @param \Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponseSim $sim sim
     *
     * @return $this
     */
    public function setSim($sim)
    {
        $this->container['sim'] = $sim;

        return $this;
    }

    /**
     * Gets service_profiles
     *
     * @return float
     */
    public function getServiceProfiles()
    {
        return $this->container['service_profiles'];
    }

    /**
     * Sets service_profiles
     *
     * @param float $service_profiles Amount of service profiles
     *
     * @return $this
     */
    public function setServiceProfiles($service_profiles)
    {
        $this->container['service_profiles'] = $service_profiles;

        return $this;
    }

    /**
     * Gets tariff_profiles
     *
     * @return float
     */
    public function getTariffProfiles()
    {
        return $this->container['tariff_profiles'];
    }

    /**
     * Sets tariff_profiles
     *
     * @param float $tariff_profiles Amount of service profiles
     *
     * @return $this
     */
    public function setTariffProfiles($tariff_profiles)
    {
        $this->container['tariff_profiles'] = $tariff_profiles;

        return $this;
    }

    /**
     * Gets users
     *
     * @return float
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param float $users Amount of users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets active_chargeable_sims
     *
     * @return float
     */
    public function getActiveChargeableSims()
    {
        return $this->container['active_chargeable_sims'];
    }

    /**
     * Sets active_chargeable_sims
     *
     * @param float $active_chargeable_sims Amount of active SIMs that will be charged within the current month. This field is omitted if there are no chargeable SIMs.
     *
     * @return $this
     */
    public function setActiveChargeableSims($active_chargeable_sims)
    {
        $this->container['active_chargeable_sims'] = $active_chargeable_sims;

        return $this;
    }

    /**
     * Gets hosting_fees
     *
     * @return float
     */
    public function getHostingFees()
    {
        return $this->container['hosting_fees'];
    }

    /**
     * Sets hosting_fees
     *
     * @param float $hosting_fees Total of SIM hosting fees for all `active_chargeable_sims`. This field is omitted if there are no chargeable SIMs.
     *
     * @return $this
     */
    public function setHostingFees($hosting_fees)
    {
        $this->container['hosting_fees'] = $hosting_fees;

        return $this;
    }

    /**
     * Gets inclusive_volume
     *
     * @return \Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponseInclusiveVolume
     */
    public function getInclusiveVolume()
    {
        return $this->container['inclusive_volume'];
    }

    /**
     * Sets inclusive_volume
     *
     * @param \Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponseInclusiveVolume $inclusive_volume inclusive_volume
     *
     * @return $this
     */
    public function setInclusiveVolume($inclusive_volume)
    {
        $this->container['inclusive_volume'] = $inclusive_volume;

        return $this;
    }

    /**
     * Gets prepaid_balance
     *
     * @return \Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponsePrepaidBalance
     */
    public function getPrepaidBalance()
    {
        return $this->container['prepaid_balance'];
    }

    /**
     * Sets prepaid_balance
     *
     * @param \Emnify\EmnifySdk\Model\GetMonthlyOrganisationStatsResponsePrepaidBalance $prepaid_balance prepaid_balance
     *
     * @return $this
     */
    public function setPrepaidBalance($prepaid_balance)
    {
        $this->container['prepaid_balance'] = $prepaid_balance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
