<?php
/**
 * ServiceProfilesApi
 * PHP version 5
 *
 * @category Class
 * @package  CodericEcosystem\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace CodericEcosystem\EmnifySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CodericEcosystem\EmnifySdk\ApiException;
use CodericEcosystem\EmnifySdk\Configuration;
use CodericEcosystem\EmnifySdk\HeaderSelector;
use CodericEcosystem\EmnifySdk\ObjectSerializer;

/**
 * ServiceProfilesApi Class Doc Comment
 *
 * @category Class
 * @package  CodericEcosystem\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class ServiceProfilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addTrafficLimit
     *
     * Add Traffic Limit to Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function addTrafficLimit($profile_id, $limit_id, $service_id)
    {
        $this->addTrafficLimitWithHttpInfo($profile_id, $limit_id, $service_id);
    }

    /**
     * Operation addTrafficLimitWithHttpInfo
     *
     * Add Traffic Limit to Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function addTrafficLimitWithHttpInfo($profile_id, $limit_id, $service_id)
    {
        $returnType = '';
        $request = $this->addTrafficLimitRequest($profile_id, $limit_id, $service_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation addTrafficLimitAsync
     *
     * Add Traffic Limit to Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrafficLimitAsync($profile_id, $limit_id, $service_id)
    {
        return $this->addTrafficLimitAsyncWithHttpInfo($profile_id, $limit_id, $service_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addTrafficLimitAsyncWithHttpInfo
     *
     * Add Traffic Limit to Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addTrafficLimitAsyncWithHttpInfo($profile_id, $limit_id, $service_id)
    {
        $returnType = '';
        $request = $this->addTrafficLimitRequest($profile_id, $limit_id, $service_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addTrafficLimit'
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addTrafficLimitRequest($profile_id, $limit_id, $service_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling addTrafficLimit'
            );
        }
        // verify the required parameter 'limit_id' is set
        if ($limit_id === null || (is_array($limit_id) && count($limit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit_id when calling addTrafficLimit'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling addTrafficLimit'
            );
        }

        $resourcePath = '/api/v1/service_profile/{profile_id}/service/{service_id}/traffic_limit/{limit_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_id' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($limit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'limit_id' . '}',
                ObjectSerializer::toPathValue($limit_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteQuotaByServiceProfileId
     *
     * Remove all quotas of assigned endpoints
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  string $quota_type The type of service of the quota, can be &#x60;data&#x60; or &#x60;sms&#x60; (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteQuotaByServiceProfileId($profile_id, $quota_type)
    {
        $this->deleteQuotaByServiceProfileIdWithHttpInfo($profile_id, $quota_type);
    }

    /**
     * Operation deleteQuotaByServiceProfileIdWithHttpInfo
     *
     * Remove all quotas of assigned endpoints
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  string $quota_type The type of service of the quota, can be &#x60;data&#x60; or &#x60;sms&#x60; (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteQuotaByServiceProfileIdWithHttpInfo($profile_id, $quota_type)
    {
        $returnType = '';
        $request = $this->deleteQuotaByServiceProfileIdRequest($profile_id, $quota_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteQuotaByServiceProfileIdAsync
     *
     * Remove all quotas of assigned endpoints
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  string $quota_type The type of service of the quota, can be &#x60;data&#x60; or &#x60;sms&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQuotaByServiceProfileIdAsync($profile_id, $quota_type)
    {
        return $this->deleteQuotaByServiceProfileIdAsyncWithHttpInfo($profile_id, $quota_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteQuotaByServiceProfileIdAsyncWithHttpInfo
     *
     * Remove all quotas of assigned endpoints
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  string $quota_type The type of service of the quota, can be &#x60;data&#x60; or &#x60;sms&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteQuotaByServiceProfileIdAsyncWithHttpInfo($profile_id, $quota_type)
    {
        $returnType = '';
        $request = $this->deleteQuotaByServiceProfileIdRequest($profile_id, $quota_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteQuotaByServiceProfileId'
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  string $quota_type The type of service of the quota, can be &#x60;data&#x60; or &#x60;sms&#x60; (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteQuotaByServiceProfileIdRequest($profile_id, $quota_type)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling deleteQuotaByServiceProfileId'
            );
        }
        // verify the required parameter 'quota_type' is set
        if ($quota_type === null || (is_array($quota_type) && count($quota_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quota_type when calling deleteQuotaByServiceProfileId'
            );
        }

        $resourcePath = '/api/v1/service_profile/{profile_id}/quota/{quota_type}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_id' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($quota_type !== null) {
            $resourcePath = str_replace(
                '{' . 'quota_type' . '}',
                ObjectSerializer::toPathValue($quota_type),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation removeTrafficLimit
     *
     * Remove Traffic Limit from a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function removeTrafficLimit($profile_id, $limit_id, $service_id)
    {
        $this->removeTrafficLimitWithHttpInfo($profile_id, $limit_id, $service_id);
    }

    /**
     * Operation removeTrafficLimitWithHttpInfo
     *
     * Remove Traffic Limit from a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeTrafficLimitWithHttpInfo($profile_id, $limit_id, $service_id)
    {
        $returnType = '';
        $request = $this->removeTrafficLimitRequest($profile_id, $limit_id, $service_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation removeTrafficLimitAsync
     *
     * Remove Traffic Limit from a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTrafficLimitAsync($profile_id, $limit_id, $service_id)
    {
        return $this->removeTrafficLimitAsyncWithHttpInfo($profile_id, $limit_id, $service_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation removeTrafficLimitAsyncWithHttpInfo
     *
     * Remove Traffic Limit from a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function removeTrafficLimitAsyncWithHttpInfo($profile_id, $limit_id, $service_id)
    {
        $returnType = '';
        $request = $this->removeTrafficLimitRequest($profile_id, $limit_id, $service_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'removeTrafficLimit'
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $limit_id Numerical ID of a Traffic Limit (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function removeTrafficLimitRequest($profile_id, $limit_id, $service_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling removeTrafficLimit'
            );
        }
        // verify the required parameter 'limit_id' is set
        if ($limit_id === null || (is_array($limit_id) && count($limit_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit_id when calling removeTrafficLimit'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling removeTrafficLimit'
            );
        }

        $resourcePath = '/api/v1/service_profile/{profile_id}/service/{service_id}/traffic_limit/{limit_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_id' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($limit_id !== null) {
            $resourcePath = str_replace(
                '{' . 'limit_id' . '}',
                ObjectSerializer::toPathValue($limit_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceProfileByProfileIdDelete
     *
     * Delete a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function serviceProfileByProfileIdDelete($profile_id)
    {
        $this->serviceProfileByProfileIdDeleteWithHttpInfo($profile_id);
    }

    /**
     * Operation serviceProfileByProfileIdDeleteWithHttpInfo
     *
     * Delete a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceProfileByProfileIdDeleteWithHttpInfo($profile_id)
    {
        $returnType = '';
        $request = $this->serviceProfileByProfileIdDeleteRequest($profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\Model40xResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceProfileByProfileIdDeleteAsync
     *
     * Delete a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileByProfileIdDeleteAsync($profile_id)
    {
        return $this->serviceProfileByProfileIdDeleteAsyncWithHttpInfo($profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceProfileByProfileIdDeleteAsyncWithHttpInfo
     *
     * Delete a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileByProfileIdDeleteAsyncWithHttpInfo($profile_id)
    {
        $returnType = '';
        $request = $this->serviceProfileByProfileIdDeleteRequest($profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceProfileByProfileIdDelete'
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceProfileByProfileIdDeleteRequest($profile_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling serviceProfileByProfileIdDelete'
            );
        }

        $resourcePath = '/api/v1/service_profile/{profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_id' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceProfileByProfileIdGet
     *
     * Retrieve a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\RetrieveaSingleServiceProfileresponse
     */
    public function serviceProfileByProfileIdGet($profile_id)
    {
        list($response) = $this->serviceProfileByProfileIdGetWithHttpInfo($profile_id);
        return $response;
    }

    /**
     * Operation serviceProfileByProfileIdGetWithHttpInfo
     *
     * Retrieve a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\RetrieveaSingleServiceProfileresponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceProfileByProfileIdGetWithHttpInfo($profile_id)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\RetrieveaSingleServiceProfileresponse';
        $request = $this->serviceProfileByProfileIdGetRequest($profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\RetrieveaSingleServiceProfileresponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceProfileByProfileIdGetAsync
     *
     * Retrieve a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileByProfileIdGetAsync($profile_id)
    {
        return $this->serviceProfileByProfileIdGetAsyncWithHttpInfo($profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceProfileByProfileIdGetAsyncWithHttpInfo
     *
     * Retrieve a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileByProfileIdGetAsyncWithHttpInfo($profile_id)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\RetrieveaSingleServiceProfileresponse';
        $request = $this->serviceProfileByProfileIdGetRequest($profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceProfileByProfileIdGet'
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceProfileByProfileIdGetRequest($profile_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling serviceProfileByProfileIdGet'
            );
        }

        $resourcePath = '/api/v1/service_profile/{profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_id' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceProfileByProfileIdPatch
     *
     * Update Service Profile
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateServiceProfile $body body (required)
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function serviceProfileByProfileIdPatch($body, $profile_id)
    {
        list($response) = $this->serviceProfileByProfileIdPatchWithHttpInfo($body, $profile_id);
        return $response;
    }

    /**
     * Operation serviceProfileByProfileIdPatchWithHttpInfo
     *
     * Update Service Profile
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateServiceProfile $body (required)
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceProfileByProfileIdPatchWithHttpInfo($body, $profile_id)
    {
        $returnType = 'object';
        $request = $this->serviceProfileByProfileIdPatchRequest($body, $profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceProfileByProfileIdPatchAsync
     *
     * Update Service Profile
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateServiceProfile $body (required)
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileByProfileIdPatchAsync($body, $profile_id)
    {
        return $this->serviceProfileByProfileIdPatchAsyncWithHttpInfo($body, $profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceProfileByProfileIdPatchAsyncWithHttpInfo
     *
     * Update Service Profile
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateServiceProfile $body (required)
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileByProfileIdPatchAsyncWithHttpInfo($body, $profile_id)
    {
        $returnType = 'object';
        $request = $this->serviceProfileByProfileIdPatchRequest($body, $profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceProfileByProfileIdPatch'
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateServiceProfile $body (required)
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceProfileByProfileIdPatchRequest($body, $profile_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling serviceProfileByProfileIdPatch'
            );
        }
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling serviceProfileByProfileIdPatch'
            );
        }

        $resourcePath = '/api/v1/service_profile/{profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_id' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceProfileGet
     *
     * List Service Profiles
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\RetrieveServiceProfileListresponse[]
     */
    public function serviceProfileGet()
    {
        list($response) = $this->serviceProfileGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation serviceProfileGetWithHttpInfo
     *
     * List Service Profiles
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\RetrieveServiceProfileListresponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceProfileGetWithHttpInfo()
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\RetrieveServiceProfileListresponse[]';
        $request = $this->serviceProfileGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\RetrieveServiceProfileListresponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceProfileGetAsync
     *
     * List Service Profiles
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileGetAsync()
    {
        return $this->serviceProfileGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceProfileGetAsyncWithHttpInfo
     *
     * List Service Profiles
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileGetAsyncWithHttpInfo()
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\RetrieveServiceProfileListresponse[]';
        $request = $this->serviceProfileGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceProfileGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceProfileGetRequest()
    {

        $resourcePath = '/api/v1/service_profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceProfilePost
     *
     * Create Service Profile
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\CreateaServiceProfilerequest $body body (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function serviceProfilePost($body)
    {
        $this->serviceProfilePostWithHttpInfo($body);
    }

    /**
     * Operation serviceProfilePostWithHttpInfo
     *
     * Create Service Profile
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\CreateaServiceProfilerequest $body (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceProfilePostWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->serviceProfilePostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation serviceProfilePostAsync
     *
     * Create Service Profile
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\CreateaServiceProfilerequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfilePostAsync($body)
    {
        return $this->serviceProfilePostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceProfilePostAsyncWithHttpInfo
     *
     * Create Service Profile
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\CreateaServiceProfilerequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfilePostAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->serviceProfilePostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceProfilePost'
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\CreateaServiceProfilerequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceProfilePostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling serviceProfilePost'
            );
        }

        $resourcePath = '/api/v1/service_profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceProfileServiceByProfileAndServiceDelete
     *
     * Remove a Service from a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function serviceProfileServiceByProfileAndServiceDelete($profile_id, $service_id)
    {
        $this->serviceProfileServiceByProfileAndServiceDeleteWithHttpInfo($profile_id, $service_id);
    }

    /**
     * Operation serviceProfileServiceByProfileAndServiceDeleteWithHttpInfo
     *
     * Remove a Service from a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceProfileServiceByProfileAndServiceDeleteWithHttpInfo($profile_id, $service_id)
    {
        $returnType = '';
        $request = $this->serviceProfileServiceByProfileAndServiceDeleteRequest($profile_id, $service_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\Model40xResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceProfileServiceByProfileAndServiceDeleteAsync
     *
     * Remove a Service from a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileServiceByProfileAndServiceDeleteAsync($profile_id, $service_id)
    {
        return $this->serviceProfileServiceByProfileAndServiceDeleteAsyncWithHttpInfo($profile_id, $service_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceProfileServiceByProfileAndServiceDeleteAsyncWithHttpInfo
     *
     * Remove a Service from a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileServiceByProfileAndServiceDeleteAsyncWithHttpInfo($profile_id, $service_id)
    {
        $returnType = '';
        $request = $this->serviceProfileServiceByProfileAndServiceDeleteRequest($profile_id, $service_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceProfileServiceByProfileAndServiceDelete'
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceProfileServiceByProfileAndServiceDeleteRequest($profile_id, $service_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling serviceProfileServiceByProfileAndServiceDelete'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling serviceProfileServiceByProfileAndServiceDelete'
            );
        }

        $resourcePath = '/api/v1/service_profile/{profile_id}/service/{service_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_id' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceProfileServiceByProfileAndServicePut
     *
     * Add a Service to a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function serviceProfileServiceByProfileAndServicePut($profile_id, $service_id)
    {
        $this->serviceProfileServiceByProfileAndServicePutWithHttpInfo($profile_id, $service_id);
    }

    /**
     * Operation serviceProfileServiceByProfileAndServicePutWithHttpInfo
     *
     * Add a Service to a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceProfileServiceByProfileAndServicePutWithHttpInfo($profile_id, $service_id)
    {
        $returnType = '';
        $request = $this->serviceProfileServiceByProfileAndServicePutRequest($profile_id, $service_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\Model40xResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceProfileServiceByProfileAndServicePutAsync
     *
     * Add a Service to a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileServiceByProfileAndServicePutAsync($profile_id, $service_id)
    {
        return $this->serviceProfileServiceByProfileAndServicePutAsyncWithHttpInfo($profile_id, $service_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceProfileServiceByProfileAndServicePutAsyncWithHttpInfo
     *
     * Add a Service to a Service Profile
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceProfileServiceByProfileAndServicePutAsyncWithHttpInfo($profile_id, $service_id)
    {
        $returnType = '';
        $request = $this->serviceProfileServiceByProfileAndServicePutRequest($profile_id, $service_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceProfileServiceByProfileAndServicePut'
     *
     * @param  float $profile_id The Numeric ID of a Service Profile (required)
     * @param  float $service_id The Numeric ID of a Service, may be:  * &#x60;0&#x60;  - USSD  * &#x60;3&#x60;  - Voice, __warning:__ voice services are not available!  * &#x60;6&#x60;  - SMS MT  * &#x60;32&#x60; - SMS MO  * &#x60;38&#x60; - Data (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serviceProfileServiceByProfileAndServicePutRequest($profile_id, $service_id)
    {
        // verify the required parameter 'profile_id' is set
        if ($profile_id === null || (is_array($profile_id) && count($profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $profile_id when calling serviceProfileServiceByProfileAndServicePut'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling serviceProfileServiceByProfileAndServicePut'
            );
        }

        $resourcePath = '/api/v1/service_profile/{profile_id}/service/{service_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'profile_id' . '}',
                ObjectSerializer::toPathValue($profile_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'service_id' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
