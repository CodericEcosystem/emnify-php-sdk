<?php
/**
 * CloudConnectApi
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/Emnify/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/Emnify/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/Emnify/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Emnify\EmnifySdk\ApiException;
use Emnify\EmnifySdk\Configuration;
use Emnify\EmnifySdk\HeaderSelector;
use Emnify\EmnifySdk\ObjectSerializer;

/**
 * CloudConnectApi Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/Emnify/emnify-php-sdk
 */
class CloudConnectApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCloudConnectAttachmentTGW
     *
     * Create a CloudConnect attachment via Transit Gateway
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectTGWRequest $body body (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createCloudConnectAttachmentTGW($body = null)
    {
        $this->createCloudConnectAttachmentTGWWithHttpInfo($body);
    }

    /**
     * Operation createCloudConnectAttachmentTGWWithHttpInfo
     *
     * Create a CloudConnect attachment via Transit Gateway
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectTGWRequest $body (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCloudConnectAttachmentTGWWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createCloudConnectAttachmentTGWRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createCloudConnectAttachmentTGWAsync
     *
     * Create a CloudConnect attachment via Transit Gateway
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectTGWRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCloudConnectAttachmentTGWAsync($body = null)
    {
        return $this->createCloudConnectAttachmentTGWAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCloudConnectAttachmentTGWAsyncWithHttpInfo
     *
     * Create a CloudConnect attachment via Transit Gateway
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectTGWRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCloudConnectAttachmentTGWAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createCloudConnectAttachmentTGWRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCloudConnectAttachmentTGW'
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectTGWRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCloudConnectAttachmentTGWRequest($body = null)
    {

        $resourcePath = '/api/v1/cnc/breakout/tgw';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCloudConnectAttachmentVPN
     *
     * Create a CloudConnect attachment via IPSec VPN
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectVPNRequest1 $body body (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createCloudConnectAttachmentVPN($body = null)
    {
        $this->createCloudConnectAttachmentVPNWithHttpInfo($body);
    }

    /**
     * Operation createCloudConnectAttachmentVPNWithHttpInfo
     *
     * Create a CloudConnect attachment via IPSec VPN
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectVPNRequest1 $body (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCloudConnectAttachmentVPNWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createCloudConnectAttachmentVPNRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createCloudConnectAttachmentVPNAsync
     *
     * Create a CloudConnect attachment via IPSec VPN
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectVPNRequest1 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCloudConnectAttachmentVPNAsync($body = null)
    {
        return $this->createCloudConnectAttachmentVPNAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCloudConnectAttachmentVPNAsyncWithHttpInfo
     *
     * Create a CloudConnect attachment via IPSec VPN
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectVPNRequest1 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCloudConnectAttachmentVPNAsyncWithHttpInfo($body = null)
    {
        $returnType = '';
        $request = $this->createCloudConnectAttachmentVPNRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCloudConnectAttachmentVPN'
     *
     * @param  \Emnify\EmnifySdk\Model\CreateCloudConnectVPNRequest1 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCloudConnectAttachmentVPNRequest($body = null)
    {

        $resourcePath = '/api/v1/cnc/breakout/vpn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCloudConnectAttachment
     *
     * Delete a specific CloudConnect attachment
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCloudConnectAttachment($cloudconnect_attachment_id)
    {
        $this->deleteCloudConnectAttachmentWithHttpInfo($cloudconnect_attachment_id);
    }

    /**
     * Operation deleteCloudConnectAttachmentWithHttpInfo
     *
     * Delete a specific CloudConnect attachment
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCloudConnectAttachmentWithHttpInfo($cloudconnect_attachment_id)
    {
        $returnType = '';
        $request = $this->deleteCloudConnectAttachmentRequest($cloudconnect_attachment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCloudConnectAttachmentAsync
     *
     * Delete a specific CloudConnect attachment
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCloudConnectAttachmentAsync($cloudconnect_attachment_id)
    {
        return $this->deleteCloudConnectAttachmentAsyncWithHttpInfo($cloudconnect_attachment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCloudConnectAttachmentAsyncWithHttpInfo
     *
     * Delete a specific CloudConnect attachment
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCloudConnectAttachmentAsyncWithHttpInfo($cloudconnect_attachment_id)
    {
        $returnType = '';
        $request = $this->deleteCloudConnectAttachmentRequest($cloudconnect_attachment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCloudConnectAttachment'
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCloudConnectAttachmentRequest($cloudconnect_attachment_id)
    {
        // verify the required parameter 'cloudconnect_attachment_id' is set
        if ($cloudconnect_attachment_id === null || (is_array($cloudconnect_attachment_id) && count($cloudconnect_attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloudconnect_attachment_id when calling deleteCloudConnectAttachment'
            );
        }

        $resourcePath = '/api/v1/cnc/breakout/{cloudconnect_attachment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cloudconnect_attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloudconnect_attachment_id' . '}',
                ObjectSerializer::toPathValue($cloudconnect_attachment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudConnectAttachmentById
     *
     * View details of a CloudConnect attachment
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return null[]
     */
    public function getCloudConnectAttachmentById($cloudconnect_attachment_id)
    {
        list($response) = $this->getCloudConnectAttachmentByIdWithHttpInfo($cloudconnect_attachment_id);
        return $response;
    }

    /**
     * Operation getCloudConnectAttachmentByIdWithHttpInfo
     *
     * View details of a CloudConnect attachment
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudConnectAttachmentByIdWithHttpInfo($cloudconnect_attachment_id)
    {
        $returnType = 'null[]';
        $request = $this->getCloudConnectAttachmentByIdRequest($cloudconnect_attachment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'null[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudConnectAttachmentByIdAsync
     *
     * View details of a CloudConnect attachment
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectAttachmentByIdAsync($cloudconnect_attachment_id)
    {
        return $this->getCloudConnectAttachmentByIdAsyncWithHttpInfo($cloudconnect_attachment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCloudConnectAttachmentByIdAsyncWithHttpInfo
     *
     * View details of a CloudConnect attachment
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectAttachmentByIdAsyncWithHttpInfo($cloudconnect_attachment_id)
    {
        $returnType = 'null[]';
        $request = $this->getCloudConnectAttachmentByIdRequest($cloudconnect_attachment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudConnectAttachmentById'
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCloudConnectAttachmentByIdRequest($cloudconnect_attachment_id)
    {
        // verify the required parameter 'cloudconnect_attachment_id' is set
        if ($cloudconnect_attachment_id === null || (is_array($cloudconnect_attachment_id) && count($cloudconnect_attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloudconnect_attachment_id when calling getCloudConnectAttachmentById'
            );
        }

        $resourcePath = '/api/v1/cnc/breakout/{cloudconnect_attachment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cloudconnect_attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloudconnect_attachment_id' . '}',
                ObjectSerializer::toPathValue($cloudconnect_attachment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudConnectAttachments
     *
     * List all CloudConnect attachments of an organisation
     *
     * @param  float $status Numerical ID of the CloudConnect attachment status &lt;br&gt; * &#x60;1&#x60; - Pending Customer Action * &#x60;2&#x60; - Pending AWS Activation * &#x60;3&#x60; - Pending EGN Activation * &#x60;4&#x60; - Pending CRG Activation * &#x60;5&#x60; - Active * &#x60;6&#x60; - Deactivation Pending * &#x60;7&#x60; - Deactivated * &#x60;8&#x60; - Rolling Back (optional)
     * @param  float $type Numerical ID of the CloudConnect attachment type &lt;br&gt; * &#x60;1&#x60; - Transit Gateway * &#x60;2&#x60; - IPSec VPN * &#x60;3&#x60; - IPSec VPN BGP * &#x60;4&#x60; - IPSec VPN BGP High Availability * &#x60;5&#x60; - Direct Connect * &#x60;6&#x60; - Shared * &#x60;7&#x60; - Transit Gateway (Classic) * &#x60;8&#x60; - IPSec VPN (Classic) (optional)
     * @param  float $organisation Numerical ID of an Organisation (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\InlineResponse20010[]
     */
    public function getCloudConnectAttachments($status = null, $type = null, $organisation = null)
    {
        list($response) = $this->getCloudConnectAttachmentsWithHttpInfo($status, $type, $organisation);
        return $response;
    }

    /**
     * Operation getCloudConnectAttachmentsWithHttpInfo
     *
     * List all CloudConnect attachments of an organisation
     *
     * @param  float $status Numerical ID of the CloudConnect attachment status &lt;br&gt; * &#x60;1&#x60; - Pending Customer Action * &#x60;2&#x60; - Pending AWS Activation * &#x60;3&#x60; - Pending EGN Activation * &#x60;4&#x60; - Pending CRG Activation * &#x60;5&#x60; - Active * &#x60;6&#x60; - Deactivation Pending * &#x60;7&#x60; - Deactivated * &#x60;8&#x60; - Rolling Back (optional)
     * @param  float $type Numerical ID of the CloudConnect attachment type &lt;br&gt; * &#x60;1&#x60; - Transit Gateway * &#x60;2&#x60; - IPSec VPN * &#x60;3&#x60; - IPSec VPN BGP * &#x60;4&#x60; - IPSec VPN BGP High Availability * &#x60;5&#x60; - Direct Connect * &#x60;6&#x60; - Shared * &#x60;7&#x60; - Transit Gateway (Classic) * &#x60;8&#x60; - IPSec VPN (Classic) (optional)
     * @param  float $organisation Numerical ID of an Organisation (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\InlineResponse20010[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudConnectAttachmentsWithHttpInfo($status = null, $type = null, $organisation = null)
    {
        $returnType = '\Emnify\EmnifySdk\Model\InlineResponse20010[]';
        $request = $this->getCloudConnectAttachmentsRequest($status, $type, $organisation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\InlineResponse20010[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudConnectAttachmentsAsync
     *
     * List all CloudConnect attachments of an organisation
     *
     * @param  float $status Numerical ID of the CloudConnect attachment status &lt;br&gt; * &#x60;1&#x60; - Pending Customer Action * &#x60;2&#x60; - Pending AWS Activation * &#x60;3&#x60; - Pending EGN Activation * &#x60;4&#x60; - Pending CRG Activation * &#x60;5&#x60; - Active * &#x60;6&#x60; - Deactivation Pending * &#x60;7&#x60; - Deactivated * &#x60;8&#x60; - Rolling Back (optional)
     * @param  float $type Numerical ID of the CloudConnect attachment type &lt;br&gt; * &#x60;1&#x60; - Transit Gateway * &#x60;2&#x60; - IPSec VPN * &#x60;3&#x60; - IPSec VPN BGP * &#x60;4&#x60; - IPSec VPN BGP High Availability * &#x60;5&#x60; - Direct Connect * &#x60;6&#x60; - Shared * &#x60;7&#x60; - Transit Gateway (Classic) * &#x60;8&#x60; - IPSec VPN (Classic) (optional)
     * @param  float $organisation Numerical ID of an Organisation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectAttachmentsAsync($status = null, $type = null, $organisation = null)
    {
        return $this->getCloudConnectAttachmentsAsyncWithHttpInfo($status, $type, $organisation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCloudConnectAttachmentsAsyncWithHttpInfo
     *
     * List all CloudConnect attachments of an organisation
     *
     * @param  float $status Numerical ID of the CloudConnect attachment status &lt;br&gt; * &#x60;1&#x60; - Pending Customer Action * &#x60;2&#x60; - Pending AWS Activation * &#x60;3&#x60; - Pending EGN Activation * &#x60;4&#x60; - Pending CRG Activation * &#x60;5&#x60; - Active * &#x60;6&#x60; - Deactivation Pending * &#x60;7&#x60; - Deactivated * &#x60;8&#x60; - Rolling Back (optional)
     * @param  float $type Numerical ID of the CloudConnect attachment type &lt;br&gt; * &#x60;1&#x60; - Transit Gateway * &#x60;2&#x60; - IPSec VPN * &#x60;3&#x60; - IPSec VPN BGP * &#x60;4&#x60; - IPSec VPN BGP High Availability * &#x60;5&#x60; - Direct Connect * &#x60;6&#x60; - Shared * &#x60;7&#x60; - Transit Gateway (Classic) * &#x60;8&#x60; - IPSec VPN (Classic) (optional)
     * @param  float $organisation Numerical ID of an Organisation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectAttachmentsAsyncWithHttpInfo($status = null, $type = null, $organisation = null)
    {
        $returnType = '\Emnify\EmnifySdk\Model\InlineResponse20010[]';
        $request = $this->getCloudConnectAttachmentsRequest($status, $type, $organisation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudConnectAttachments'
     *
     * @param  float $status Numerical ID of the CloudConnect attachment status &lt;br&gt; * &#x60;1&#x60; - Pending Customer Action * &#x60;2&#x60; - Pending AWS Activation * &#x60;3&#x60; - Pending EGN Activation * &#x60;4&#x60; - Pending CRG Activation * &#x60;5&#x60; - Active * &#x60;6&#x60; - Deactivation Pending * &#x60;7&#x60; - Deactivated * &#x60;8&#x60; - Rolling Back (optional)
     * @param  float $type Numerical ID of the CloudConnect attachment type &lt;br&gt; * &#x60;1&#x60; - Transit Gateway * &#x60;2&#x60; - IPSec VPN * &#x60;3&#x60; - IPSec VPN BGP * &#x60;4&#x60; - IPSec VPN BGP High Availability * &#x60;5&#x60; - Direct Connect * &#x60;6&#x60; - Shared * &#x60;7&#x60; - Transit Gateway (Classic) * &#x60;8&#x60; - IPSec VPN (Classic) (optional)
     * @param  float $organisation Numerical ID of an Organisation (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCloudConnectAttachmentsRequest($status = null, $type = null, $organisation = null)
    {

        $resourcePath = '/api/v1/cnc/breakout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status, null);
        }
        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }
        // query params
        if ($organisation !== null) {
            $queryParams['organisation'] = ObjectSerializer::toQueryValue($organisation, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudConnectAvailableRegionsByBreakoutType
     *
     * Get list of available CloudConnect regions by breakout type
     *
     * @param  int $breakout_type_id ID of a CloudConnect breakout type. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\InlineResponse20011[]
     */
    public function getCloudConnectAvailableRegionsByBreakoutType($breakout_type_id)
    {
        list($response) = $this->getCloudConnectAvailableRegionsByBreakoutTypeWithHttpInfo($breakout_type_id);
        return $response;
    }

    /**
     * Operation getCloudConnectAvailableRegionsByBreakoutTypeWithHttpInfo
     *
     * Get list of available CloudConnect regions by breakout type
     *
     * @param  int $breakout_type_id ID of a CloudConnect breakout type. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\InlineResponse20011[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudConnectAvailableRegionsByBreakoutTypeWithHttpInfo($breakout_type_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\InlineResponse20011[]';
        $request = $this->getCloudConnectAvailableRegionsByBreakoutTypeRequest($breakout_type_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\InlineResponse20011[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudConnectAvailableRegionsByBreakoutTypeAsync
     *
     * Get list of available CloudConnect regions by breakout type
     *
     * @param  int $breakout_type_id ID of a CloudConnect breakout type. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectAvailableRegionsByBreakoutTypeAsync($breakout_type_id)
    {
        return $this->getCloudConnectAvailableRegionsByBreakoutTypeAsyncWithHttpInfo($breakout_type_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCloudConnectAvailableRegionsByBreakoutTypeAsyncWithHttpInfo
     *
     * Get list of available CloudConnect regions by breakout type
     *
     * @param  int $breakout_type_id ID of a CloudConnect breakout type. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectAvailableRegionsByBreakoutTypeAsyncWithHttpInfo($breakout_type_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\InlineResponse20011[]';
        $request = $this->getCloudConnectAvailableRegionsByBreakoutTypeRequest($breakout_type_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudConnectAvailableRegionsByBreakoutType'
     *
     * @param  int $breakout_type_id ID of a CloudConnect breakout type. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCloudConnectAvailableRegionsByBreakoutTypeRequest($breakout_type_id)
    {
        // verify the required parameter 'breakout_type_id' is set
        if ($breakout_type_id === null || (is_array($breakout_type_id) && count($breakout_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $breakout_type_id when calling getCloudConnectAvailableRegionsByBreakoutType'
            );
        }

        $resourcePath = '/api/v1/cnc/breakout_type/{breakout_type_id}/available_region';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($breakout_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'breakout_type_id' . '}',
                ObjectSerializer::toPathValue($breakout_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudConnectBreakoutTypes
     *
     * List CloudConnect breakout types
     *
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\CloudConnectBreakoutType[]
     */
    public function getCloudConnectBreakoutTypes()
    {
        list($response) = $this->getCloudConnectBreakoutTypesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCloudConnectBreakoutTypesWithHttpInfo
     *
     * List CloudConnect breakout types
     *
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\CloudConnectBreakoutType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudConnectBreakoutTypesWithHttpInfo()
    {
        $returnType = '\Emnify\EmnifySdk\Model\CloudConnectBreakoutType[]';
        $request = $this->getCloudConnectBreakoutTypesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\CloudConnectBreakoutType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudConnectBreakoutTypesAsync
     *
     * List CloudConnect breakout types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectBreakoutTypesAsync()
    {
        return $this->getCloudConnectBreakoutTypesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCloudConnectBreakoutTypesAsyncWithHttpInfo
     *
     * List CloudConnect breakout types
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectBreakoutTypesAsyncWithHttpInfo()
    {
        $returnType = '\Emnify\EmnifySdk\Model\CloudConnectBreakoutType[]';
        $request = $this->getCloudConnectBreakoutTypesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudConnectBreakoutTypes'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCloudConnectBreakoutTypesRequest()
    {

        $resourcePath = '/api/v1/cnc/breakout_type';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudConnectRegions
     *
     * Get list of available CloudConnect regions
     *
     * @param  int $type Breakout type ID to filter the results for. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getCloudConnectRegions($type = null)
    {
        $this->getCloudConnectRegionsWithHttpInfo($type);
    }

    /**
     * Operation getCloudConnectRegionsWithHttpInfo
     *
     * Get list of available CloudConnect regions
     *
     * @param  int $type Breakout type ID to filter the results for. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudConnectRegionsWithHttpInfo($type = null)
    {
        $returnType = '';
        $request = $this->getCloudConnectRegionsRequest($type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudConnectRegionsAsync
     *
     * Get list of available CloudConnect regions
     *
     * @param  int $type Breakout type ID to filter the results for. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectRegionsAsync($type = null)
    {
        return $this->getCloudConnectRegionsAsyncWithHttpInfo($type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCloudConnectRegionsAsyncWithHttpInfo
     *
     * Get list of available CloudConnect regions
     *
     * @param  int $type Breakout type ID to filter the results for. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudConnectRegionsAsyncWithHttpInfo($type = null)
    {
        $returnType = '';
        $request = $this->getCloudConnectRegionsRequest($type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudConnectRegions'
     *
     * @param  int $type Breakout type ID to filter the results for. Possible values can be retrieved with &#x60;GET /api/v1/cnc/breakout_type&#x60;. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCloudConnectRegionsRequest($type = null)
    {

        $resourcePath = '/api/v1/cnc/region';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['type'] = ObjectSerializer::toQueryValue($type, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCloudConnectCustomPrices
     *
     * List CloudConnect prices
     *
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return null[]
     */
    public function listCloudConnectCustomPrices()
    {
        list($response) = $this->listCloudConnectCustomPricesWithHttpInfo();
        return $response;
    }

    /**
     * Operation listCloudConnectCustomPricesWithHttpInfo
     *
     * List CloudConnect prices
     *
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listCloudConnectCustomPricesWithHttpInfo()
    {
        $returnType = 'null[]';
        $request = $this->listCloudConnectCustomPricesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'null[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCloudConnectCustomPricesAsync
     *
     * List CloudConnect prices
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCloudConnectCustomPricesAsync()
    {
        return $this->listCloudConnectCustomPricesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCloudConnectCustomPricesAsyncWithHttpInfo
     *
     * List CloudConnect prices
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCloudConnectCustomPricesAsyncWithHttpInfo()
    {
        $returnType = 'null[]';
        $request = $this->listCloudConnectCustomPricesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCloudConnectCustomPrices'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCloudConnectCustomPricesRequest()
    {

        $resourcePath = '/api/v1/cnc/pricing';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retryCloudConnectAttachment
     *
     * Retry creation of an expired TGW breakout
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function retryCloudConnectAttachment($cloudconnect_attachment_id)
    {
        $this->retryCloudConnectAttachmentWithHttpInfo($cloudconnect_attachment_id);
    }

    /**
     * Operation retryCloudConnectAttachmentWithHttpInfo
     *
     * Retry creation of an expired TGW breakout
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function retryCloudConnectAttachmentWithHttpInfo($cloudconnect_attachment_id)
    {
        $returnType = '';
        $request = $this->retryCloudConnectAttachmentRequest($cloudconnect_attachment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation retryCloudConnectAttachmentAsync
     *
     * Retry creation of an expired TGW breakout
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retryCloudConnectAttachmentAsync($cloudconnect_attachment_id)
    {
        return $this->retryCloudConnectAttachmentAsyncWithHttpInfo($cloudconnect_attachment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retryCloudConnectAttachmentAsyncWithHttpInfo
     *
     * Retry creation of an expired TGW breakout
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retryCloudConnectAttachmentAsyncWithHttpInfo($cloudconnect_attachment_id)
    {
        $returnType = '';
        $request = $this->retryCloudConnectAttachmentRequest($cloudconnect_attachment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retryCloudConnectAttachment'
     *
     * @param  float $cloudconnect_attachment_id Numerical ID of a CloudConnect attachment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retryCloudConnectAttachmentRequest($cloudconnect_attachment_id)
    {
        // verify the required parameter 'cloudconnect_attachment_id' is set
        if ($cloudconnect_attachment_id === null || (is_array($cloudconnect_attachment_id) && count($cloudconnect_attachment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cloudconnect_attachment_id when calling retryCloudConnectAttachment'
            );
        }

        $resourcePath = '/api/v1/cnc/breakout/{cloudconnect_attachment_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($cloudconnect_attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cloudconnect_attachment_id' . '}',
                ObjectSerializer::toPathValue($cloudconnect_attachment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
