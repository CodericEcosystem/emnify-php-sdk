<?php

/**
 * EndpointApi
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Emnify\EmnifySdk\ApiException;
use Emnify\EmnifySdk\Configuration;
use Emnify\EmnifySdk\HeaderSelector;
use Emnify\EmnifySdk\ObjectSerializer;

/**
 * EndpointApi Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class EndpointApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createEndpoint
     *
     * Create Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\Endpoint1 $body body (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createEndpoint($body)
    {
        $this->createEndpointWithHttpInfo($body);
    }

    /**
     * Operation createEndpointWithHttpInfo
     *
     * Create Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\Endpoint1 $body (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEndpointWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->createEndpointRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\Model40xResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\Model40xResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\ChangePassword422Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEndpointAsync
     *
     * Create Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\Endpoint1 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEndpointAsync($body)
    {
        return $this->createEndpointAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEndpointAsyncWithHttpInfo
     *
     * Create Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\Endpoint1 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEndpointAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->createEndpointRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEndpoint'
     *
     * @param  \Emnify\EmnifySdk\Model\Endpoint1 $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createEndpointRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createEndpoint'
            );
        }

        $resourcePath = '/api/v1/endpoint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEndpointDataQuotaById
     *
     * Remove Data Quota
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEndpointDataQuotaById($endpoint_id)
    {
        $this->deleteEndpointDataQuotaByIdWithHttpInfo($endpoint_id);
    }

    /**
     * Operation deleteEndpointDataQuotaByIdWithHttpInfo
     *
     * Remove Data Quota
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEndpointDataQuotaByIdWithHttpInfo($endpoint_id)
    {
        $returnType = '';
        $request = $this->deleteEndpointDataQuotaByIdRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEndpointDataQuotaByIdAsync
     *
     * Remove Data Quota
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEndpointDataQuotaByIdAsync($endpoint_id)
    {
        return $this->deleteEndpointDataQuotaByIdAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEndpointDataQuotaByIdAsyncWithHttpInfo
     *
     * Remove Data Quota
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEndpointDataQuotaByIdAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '';
        $request = $this->deleteEndpointDataQuotaByIdRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEndpointDataQuotaById'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEndpointDataQuotaByIdRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling deleteEndpointDataQuotaById'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/quota/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEndpointSmsQuotaById
     *
     * Remove SMS Quota
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEndpointSmsQuotaById($endpoint_id)
    {
        $this->deleteEndpointSmsQuotaByIdWithHttpInfo($endpoint_id);
    }

    /**
     * Operation deleteEndpointSmsQuotaByIdWithHttpInfo
     *
     * Remove SMS Quota
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEndpointSmsQuotaByIdWithHttpInfo($endpoint_id)
    {
        $returnType = '';
        $request = $this->deleteEndpointSmsQuotaByIdRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEndpointSmsQuotaByIdAsync
     *
     * Remove SMS Quota
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEndpointSmsQuotaByIdAsync($endpoint_id)
    {
        return $this->deleteEndpointSmsQuotaByIdAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEndpointSmsQuotaByIdAsyncWithHttpInfo
     *
     * Remove SMS Quota
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEndpointSmsQuotaByIdAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '';
        $request = $this->deleteEndpointSmsQuotaByIdRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEndpointSmsQuotaById'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEndpointSmsQuotaByIdRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling deleteEndpointSmsQuotaById'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/quota/sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointBalanceByEndpointIdDelete
     *
     * Reset Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointBalanceByEndpointIdDelete($endpoint_id)
    {
        $this->endpointBalanceByEndpointIdDeleteWithHttpInfo($endpoint_id);
    }

    /**
     * Operation endpointBalanceByEndpointIdDeleteWithHttpInfo
     *
     * Reset Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointBalanceByEndpointIdDeleteWithHttpInfo($endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointBalanceByEndpointIdDeleteRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointBalanceByEndpointIdDeleteAsync
     *
     * Reset Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointBalanceByEndpointIdDeleteAsync($endpoint_id)
    {
        return $this->endpointBalanceByEndpointIdDeleteAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointBalanceByEndpointIdDeleteAsyncWithHttpInfo
     *
     * Reset Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointBalanceByEndpointIdDeleteAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointBalanceByEndpointIdDeleteRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointBalanceByEndpointIdDelete'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointBalanceByEndpointIdDeleteRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointBalanceByEndpointIdDelete'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointBalanceByEndpointIdGet
     *
     * Endpoint Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\RetrievePrepaidBalanceresponse
     */
    public function endpointBalanceByEndpointIdGet($endpoint_id)
    {
        list($response) = $this->endpointBalanceByEndpointIdGetWithHttpInfo($endpoint_id);
        return $response;
    }

    /**
     * Operation endpointBalanceByEndpointIdGetWithHttpInfo
     *
     * Endpoint Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\RetrievePrepaidBalanceresponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointBalanceByEndpointIdGetWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrievePrepaidBalanceresponse';
        $request = $this->endpointBalanceByEndpointIdGetRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\RetrievePrepaidBalanceresponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointBalanceByEndpointIdGetAsync
     *
     * Endpoint Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointBalanceByEndpointIdGetAsync($endpoint_id)
    {
        return $this->endpointBalanceByEndpointIdGetAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointBalanceByEndpointIdGetAsyncWithHttpInfo
     *
     * Endpoint Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointBalanceByEndpointIdGetAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrievePrepaidBalanceresponse';
        $request = $this->endpointBalanceByEndpointIdGetRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointBalanceByEndpointIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointBalanceByEndpointIdGetRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointBalanceByEndpointIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointBalanceByEndpointIdPost
     *
     * Update Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdatePrepaidBalanceresponse $body body (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointBalanceByEndpointIdPost($endpoint_id, $body = null)
    {
        $this->endpointBalanceByEndpointIdPostWithHttpInfo($endpoint_id, $body);
    }

    /**
     * Operation endpointBalanceByEndpointIdPostWithHttpInfo
     *
     * Update Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdatePrepaidBalanceresponse $body (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointBalanceByEndpointIdPostWithHttpInfo($endpoint_id, $body = null)
    {
        $returnType = '';
        $request = $this->endpointBalanceByEndpointIdPostRequest($endpoint_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointBalanceByEndpointIdPostAsync
     *
     * Update Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdatePrepaidBalanceresponse $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointBalanceByEndpointIdPostAsync($endpoint_id, $body = null)
    {
        return $this->endpointBalanceByEndpointIdPostAsyncWithHttpInfo($endpoint_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointBalanceByEndpointIdPostAsyncWithHttpInfo
     *
     * Update Prepaid Balance
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdatePrepaidBalanceresponse $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointBalanceByEndpointIdPostAsyncWithHttpInfo($endpoint_id, $body = null)
    {
        $returnType = '';
        $request = $this->endpointBalanceByEndpointIdPostRequest($endpoint_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointBalanceByEndpointIdPost'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdatePrepaidBalanceresponse $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointBalanceByEndpointIdPostRequest($endpoint_id, $body = null)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointBalanceByEndpointIdPost'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointByIdDelete
     *
     * Delete an Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointByIdDelete($endpoint_id)
    {
        $this->endpointByIdDeleteWithHttpInfo($endpoint_id);
    }

    /**
     * Operation endpointByIdDeleteWithHttpInfo
     *
     * Delete an Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointByIdDeleteWithHttpInfo($endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointByIdDeleteRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointByIdDeleteAsync
     *
     * Delete an Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointByIdDeleteAsync($endpoint_id)
    {
        return $this->endpointByIdDeleteAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointByIdDeleteAsyncWithHttpInfo
     *
     * Delete an Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointByIdDeleteAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointByIdDeleteRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointByIdDelete'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointByIdDeleteRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointByIdDelete'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointByIdGet
     *
     * Endpoint Details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\Endpoint2
     */
    public function endpointByIdGet($endpoint_id)
    {
        list($response) = $this->endpointByIdGetWithHttpInfo($endpoint_id);
        return $response;
    }

    /**
     * Operation endpointByIdGetWithHttpInfo
     *
     * Endpoint Details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\Endpoint2, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointByIdGetWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\Endpoint2';
        $request = $this->endpointByIdGetRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\Endpoint2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointByIdGetAsync
     *
     * Endpoint Details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointByIdGetAsync($endpoint_id)
    {
        return $this->endpointByIdGetAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointByIdGetAsyncWithHttpInfo
     *
     * Endpoint Details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointByIdGetAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\Endpoint2';
        $request = $this->endpointByIdGetRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointByIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointByIdGetRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointByIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointByIdPatch
     *
     * Update an Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpoint $body body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointByIdPatch($body, $endpoint_id)
    {
        $this->endpointByIdPatchWithHttpInfo($body, $endpoint_id);
    }

    /**
     * Operation endpointByIdPatchWithHttpInfo
     *
     * Update an Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpoint $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointByIdPatchWithHttpInfo($body, $endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointByIdPatchRequest($body, $endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointByIdPatchAsync
     *
     * Update an Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpoint $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointByIdPatchAsync($body, $endpoint_id)
    {
        return $this->endpointByIdPatchAsyncWithHttpInfo($body, $endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointByIdPatchAsyncWithHttpInfo
     *
     * Update an Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpoint $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointByIdPatchAsyncWithHttpInfo($body, $endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointByIdPatchRequest($body, $endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointByIdPatch'
     *
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpoint $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointByIdPatchRequest($body, $endpoint_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling endpointByIdPatch'
            );
        }
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointByIdPatch'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointConnectivityByIdGet
     *
     * Endpoint Connectivity Status
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\RetrieveEndpointConnectivityStatusresponse
     */
    public function endpointConnectivityByIdGet($endpoint_id)
    {
        list($response) = $this->endpointConnectivityByIdGetWithHttpInfo($endpoint_id);
        return $response;
    }

    /**
     * Operation endpointConnectivityByIdGetWithHttpInfo
     *
     * Endpoint Connectivity Status
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\RetrieveEndpointConnectivityStatusresponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointConnectivityByIdGetWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveEndpointConnectivityStatusresponse';
        $request = $this->endpointConnectivityByIdGetRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\RetrieveEndpointConnectivityStatusresponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointConnectivityByIdGetAsync
     *
     * Endpoint Connectivity Status
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointConnectivityByIdGetAsync($endpoint_id)
    {
        return $this->endpointConnectivityByIdGetAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointConnectivityByIdGetAsyncWithHttpInfo
     *
     * Endpoint Connectivity Status
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointConnectivityByIdGetAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveEndpointConnectivityStatusresponse';
        $request = $this->endpointConnectivityByIdGetRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointConnectivityByIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointConnectivityByIdGetRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointConnectivityByIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/connectivity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointEventsByID
     *
     * List Endpoint events
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\RetrieveEventsresponse
     */
    public function endpointEventsByID($endpoint_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        list($response) = $this->endpointEventsByIDWithHttpInfo($endpoint_id, $page, $per_page, $sort, $q);
        return $response;
    }

    /**
     * Operation endpointEventsByIDWithHttpInfo
     *
     * List Endpoint events
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\RetrieveEventsresponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointEventsByIDWithHttpInfo($endpoint_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveEventsresponse[]';
        $request = $this->endpointEventsByIDRequest($endpoint_id, $page, $per_page, $sort, $q);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\RetrieveEventsresponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointEventsByIDAsync
     *
     * List Endpoint events
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointEventsByIDAsync($endpoint_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        return $this->endpointEventsByIDAsyncWithHttpInfo($endpoint_id, $page, $per_page, $sort, $q)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointEventsByIDAsyncWithHttpInfo
     *
     * List Endpoint events
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointEventsByIDAsyncWithHttpInfo($endpoint_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveEventsresponse';
        $request = $this->endpointEventsByIDRequest($endpoint_id, $page, $per_page, $sort, $q);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointEventsByID'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointEventsByIDRequest($endpoint_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointEventsByID'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/event';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page, 'int32');
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointOperatorBlacklistByEndpointIdGet
     *
     * List Operator Blacklist for Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\RetrieveOperatorBlacklistresponse[]
     */
    public function endpointOperatorBlacklistByEndpointIdGet($endpoint_id)
    {
        list($response) = $this->endpointOperatorBlacklistByEndpointIdGetWithHttpInfo($endpoint_id);
        return $response;
    }

    /**
     * Operation endpointOperatorBlacklistByEndpointIdGetWithHttpInfo
     *
     * List Operator Blacklist for Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\RetrieveOperatorBlacklistresponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointOperatorBlacklistByEndpointIdGetWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveOperatorBlacklistresponse[]';
        $request = $this->endpointOperatorBlacklistByEndpointIdGetRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\RetrieveOperatorBlacklistresponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointOperatorBlacklistByEndpointIdGetAsync
     *
     * List Operator Blacklist for Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointOperatorBlacklistByEndpointIdGetAsync($endpoint_id)
    {
        return $this->endpointOperatorBlacklistByEndpointIdGetAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointOperatorBlacklistByEndpointIdGetAsyncWithHttpInfo
     *
     * List Operator Blacklist for Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointOperatorBlacklistByEndpointIdGetAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveOperatorBlacklistresponse[]';
        $request = $this->endpointOperatorBlacklistByEndpointIdGetRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointOperatorBlacklistByEndpointIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointOperatorBlacklistByEndpointIdGetRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointOperatorBlacklistByEndpointIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/operator_blacklist';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointOperatorBlacklistByEpIdAndOperatorIdDelete
     *
     * Remove an Operator from the Blacklist
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointOperatorBlacklistByEpIdAndOperatorIdDelete($endpoint_id, $operator_id)
    {
        $this->endpointOperatorBlacklistByEpIdAndOperatorIdDeleteWithHttpInfo($endpoint_id, $operator_id);
    }

    /**
     * Operation endpointOperatorBlacklistByEpIdAndOperatorIdDeleteWithHttpInfo
     *
     * Remove an Operator from the Blacklist
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointOperatorBlacklistByEpIdAndOperatorIdDeleteWithHttpInfo($endpoint_id, $operator_id)
    {
        $returnType = '';
        $request = $this->endpointOperatorBlacklistByEpIdAndOperatorIdDeleteRequest($endpoint_id, $operator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\Model40xResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointOperatorBlacklistByEpIdAndOperatorIdDeleteAsync
     *
     * Remove an Operator from the Blacklist
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointOperatorBlacklistByEpIdAndOperatorIdDeleteAsync($endpoint_id, $operator_id)
    {
        return $this->endpointOperatorBlacklistByEpIdAndOperatorIdDeleteAsyncWithHttpInfo($endpoint_id, $operator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointOperatorBlacklistByEpIdAndOperatorIdDeleteAsyncWithHttpInfo
     *
     * Remove an Operator from the Blacklist
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointOperatorBlacklistByEpIdAndOperatorIdDeleteAsyncWithHttpInfo($endpoint_id, $operator_id)
    {
        $returnType = '';
        $request = $this->endpointOperatorBlacklistByEpIdAndOperatorIdDeleteRequest($endpoint_id, $operator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointOperatorBlacklistByEpIdAndOperatorIdDelete'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointOperatorBlacklistByEpIdAndOperatorIdDeleteRequest($endpoint_id, $operator_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointOperatorBlacklistByEpIdAndOperatorIdDelete'
            );
        }
        // verify the required parameter 'operator_id' is set
        if ($operator_id === null || (is_array($operator_id) && count($operator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_id when calling endpointOperatorBlacklistByEpIdAndOperatorIdDelete'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/operator_blacklist/{operator_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($operator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'operator_id' . '}',
                ObjectSerializer::toPathValue($operator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointOperatorBlacklistByEpIdAndOperatorIdPut
     *
     * Add an Operator to the Blacklist
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointOperatorBlacklistByEpIdAndOperatorIdPut($endpoint_id, $operator_id)
    {
        $this->endpointOperatorBlacklistByEpIdAndOperatorIdPutWithHttpInfo($endpoint_id, $operator_id);
    }

    /**
     * Operation endpointOperatorBlacklistByEpIdAndOperatorIdPutWithHttpInfo
     *
     * Add an Operator to the Blacklist
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointOperatorBlacklistByEpIdAndOperatorIdPutWithHttpInfo($endpoint_id, $operator_id)
    {
        $returnType = '';
        $request = $this->endpointOperatorBlacklistByEpIdAndOperatorIdPutRequest($endpoint_id, $operator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\Model40xResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointOperatorBlacklistByEpIdAndOperatorIdPutAsync
     *
     * Add an Operator to the Blacklist
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointOperatorBlacklistByEpIdAndOperatorIdPutAsync($endpoint_id, $operator_id)
    {
        return $this->endpointOperatorBlacklistByEpIdAndOperatorIdPutAsyncWithHttpInfo($endpoint_id, $operator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointOperatorBlacklistByEpIdAndOperatorIdPutAsyncWithHttpInfo
     *
     * Add an Operator to the Blacklist
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointOperatorBlacklistByEpIdAndOperatorIdPutAsyncWithHttpInfo($endpoint_id, $operator_id)
    {
        $returnType = '';
        $request = $this->endpointOperatorBlacklistByEpIdAndOperatorIdPutRequest($endpoint_id, $operator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointOperatorBlacklistByEpIdAndOperatorIdPut'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $operator_id Numerical ID of an Operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointOperatorBlacklistByEpIdAndOperatorIdPutRequest($endpoint_id, $operator_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointOperatorBlacklistByEpIdAndOperatorIdPut'
            );
        }
        // verify the required parameter 'operator_id' is set
        if ($operator_id === null || (is_array($operator_id) && count($operator_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $operator_id when calling endpointOperatorBlacklistByEpIdAndOperatorIdPut'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/operator_blacklist/{operator_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($operator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'operator_id' . '}',
                ObjectSerializer::toPathValue($operator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointQuotaDataByEndpointIdGet
     *
     * Retrieve Data Quota details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\Quota
     */
    public function endpointQuotaDataByEndpointIdGet($endpoint_id)
    {
        list($response) = $this->endpointQuotaDataByEndpointIdGetWithHttpInfo($endpoint_id);
        return $response;
    }

    /**
     * Operation endpointQuotaDataByEndpointIdGetWithHttpInfo
     *
     * Retrieve Data Quota details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\Quota, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointQuotaDataByEndpointIdGetWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\Quota';
        $request = $this->endpointQuotaDataByEndpointIdGetRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\Quota',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointQuotaDataByEndpointIdGetAsync
     *
     * Retrieve Data Quota details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointQuotaDataByEndpointIdGetAsync($endpoint_id)
    {
        return $this->endpointQuotaDataByEndpointIdGetAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointQuotaDataByEndpointIdGetAsyncWithHttpInfo
     *
     * Retrieve Data Quota details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointQuotaDataByEndpointIdGetAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\Quota';
        $request = $this->endpointQuotaDataByEndpointIdGetRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointQuotaDataByEndpointIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointQuotaDataByEndpointIdGetRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointQuotaDataByEndpointIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/quota/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointQuotaDataByEndpointIdPost
     *
     * Set Data Quota
     *
     * @param  \Emnify\EmnifySdk\Model\Quota $body body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointQuotaDataByEndpointIdPost($body, $endpoint_id)
    {
        $this->endpointQuotaDataByEndpointIdPostWithHttpInfo($body, $endpoint_id);
    }

    /**
     * Operation endpointQuotaDataByEndpointIdPostWithHttpInfo
     *
     * Set Data Quota
     *
     * @param  \Emnify\EmnifySdk\Model\Quota $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointQuotaDataByEndpointIdPostWithHttpInfo($body, $endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointQuotaDataByEndpointIdPostRequest($body, $endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\ChangeQuota422Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointQuotaDataByEndpointIdPostAsync
     *
     * Set Data Quota
     *
     * @param  \Emnify\EmnifySdk\Model\Quota $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointQuotaDataByEndpointIdPostAsync($body, $endpoint_id)
    {
        return $this->endpointQuotaDataByEndpointIdPostAsyncWithHttpInfo($body, $endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointQuotaDataByEndpointIdPostAsyncWithHttpInfo
     *
     * Set Data Quota
     *
     * @param  \Emnify\EmnifySdk\Model\Quota $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointQuotaDataByEndpointIdPostAsyncWithHttpInfo($body, $endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointQuotaDataByEndpointIdPostRequest($body, $endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointQuotaDataByEndpointIdPost'
     *
     * @param  \Emnify\EmnifySdk\Model\Quota $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointQuotaDataByEndpointIdPostRequest($body, $endpoint_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling endpointQuotaDataByEndpointIdPost'
            );
        }
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointQuotaDataByEndpointIdPost'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/quota/data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointQuotaSmsByEndpointIdGet
     *
     * Show SMS Quota details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\Quota, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointQuotaSmsByEndpointIdGet($endpoint_id)
    {
        list($response) = $this->endpointQuotaSmsByEndpointIdGetWithHttpInfo($endpoint_id);
        return $response;
    }

    /**
     * Operation endpointQuotaSmsByEndpointIdGetWithHttpInfo
     *
     * Show SMS Quota details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\Quota, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointQuotaSmsByEndpointIdGetWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\Quota';
        $request = $this->endpointQuotaSmsByEndpointIdGetRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $statusCode,
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointQuotaSmsByEndpointIdGetAsync
     *
     * Show SMS Quota details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointQuotaSmsByEndpointIdGetAsync($endpoint_id)
    {
        return $this->endpointQuotaSmsByEndpointIdGetAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointQuotaSmsByEndpointIdGetAsyncWithHttpInfo
     *
     * Show SMS Quota details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointQuotaSmsByEndpointIdGetAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\Quota';
        $request = $this->endpointQuotaSmsByEndpointIdGetRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointQuotaSmsByEndpointIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointQuotaSmsByEndpointIdGetRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointQuotaSmsByEndpointIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/quota/sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointQuotaSmsByEndpointIdPost
     *
     * Set SMS Quota
     *
     * @param  \Emnify\EmnifySdk\Model\SMSQuota $body body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointQuotaSmsByEndpointIdPost($body, $endpoint_id)
    {
        $this->endpointQuotaSmsByEndpointIdPostWithHttpInfo($body, $endpoint_id);
    }

    /**
     * Operation endpointQuotaSmsByEndpointIdPostWithHttpInfo
     *
     * Set SMS Quota
     *
     * @param  \Emnify\EmnifySdk\Model\SMSQuota $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointQuotaSmsByEndpointIdPostWithHttpInfo($body, $endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointQuotaSmsByEndpointIdPostRequest($body, $endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointQuotaSmsByEndpointIdPostAsync
     *
     * Set SMS Quota
     *
     * @param  \Emnify\EmnifySdk\Model\SMSQuota $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointQuotaSmsByEndpointIdPostAsync($body, $endpoint_id)
    {
        return $this->endpointQuotaSmsByEndpointIdPostAsyncWithHttpInfo($body, $endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointQuotaSmsByEndpointIdPostAsyncWithHttpInfo
     *
     * Set SMS Quota
     *
     * @param  \Emnify\EmnifySdk\Model\SMSQuota $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointQuotaSmsByEndpointIdPostAsyncWithHttpInfo($body, $endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointQuotaSmsByEndpointIdPostRequest($body, $endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointQuotaSmsByEndpointIdPost'
     *
     * @param  \Emnify\EmnifySdk\Model\SMSQuota $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointQuotaSmsByEndpointIdPostRequest($body, $endpoint_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling endpointQuotaSmsByEndpointIdPost'
            );
        }
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointQuotaSmsByEndpointIdPost'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/quota/sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointSmsByEndpointIdAndSmsIdDelete
     *
     * Cancel SMS
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointSmsByEndpointIdAndSmsIdDelete($endpoint_id, $sms_id)
    {
        $this->endpointSmsByEndpointIdAndSmsIdDeleteWithHttpInfo($endpoint_id, $sms_id);
    }

    /**
     * Operation endpointSmsByEndpointIdAndSmsIdDeleteWithHttpInfo
     *
     * Cancel SMS
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointSmsByEndpointIdAndSmsIdDeleteWithHttpInfo($endpoint_id, $sms_id)
    {
        $returnType = '';
        $request = $this->endpointSmsByEndpointIdAndSmsIdDeleteRequest($endpoint_id, $sms_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointSmsByEndpointIdAndSmsIdDeleteAsync
     *
     * Cancel SMS
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointSmsByEndpointIdAndSmsIdDeleteAsync($endpoint_id, $sms_id)
    {
        return $this->endpointSmsByEndpointIdAndSmsIdDeleteAsyncWithHttpInfo($endpoint_id, $sms_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointSmsByEndpointIdAndSmsIdDeleteAsyncWithHttpInfo
     *
     * Cancel SMS
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointSmsByEndpointIdAndSmsIdDeleteAsyncWithHttpInfo($endpoint_id, $sms_id)
    {
        $returnType = '';
        $request = $this->endpointSmsByEndpointIdAndSmsIdDeleteRequest($endpoint_id, $sms_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointSmsByEndpointIdAndSmsIdDelete'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointSmsByEndpointIdAndSmsIdDeleteRequest($endpoint_id, $sms_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointSmsByEndpointIdAndSmsIdDelete'
            );
        }
        // verify the required parameter 'sms_id' is set
        if ($sms_id === null || (is_array($sms_id) && count($sms_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sms_id when calling endpointSmsByEndpointIdAndSmsIdDelete'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/sms/{sms_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($sms_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sms_id' . '}',
                ObjectSerializer::toPathValue($sms_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointSmsByEndpointIdAndSmsIdGet
     *
     * SMS details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\GetdetailsofSMSresponse
     */
    public function endpointSmsByEndpointIdAndSmsIdGet($endpoint_id, $sms_id)
    {
        list($response) = $this->endpointSmsByEndpointIdAndSmsIdGetWithHttpInfo($endpoint_id, $sms_id);
        return $response;
    }

    /**
     * Operation endpointSmsByEndpointIdAndSmsIdGetWithHttpInfo
     *
     * SMS details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\GetdetailsofSMSresponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointSmsByEndpointIdAndSmsIdGetWithHttpInfo($endpoint_id, $sms_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\GetdetailsofSMSresponse';
        $request = $this->endpointSmsByEndpointIdAndSmsIdGetRequest($endpoint_id, $sms_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\GetdetailsofSMSresponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointSmsByEndpointIdAndSmsIdGetAsync
     *
     * SMS details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointSmsByEndpointIdAndSmsIdGetAsync($endpoint_id, $sms_id)
    {
        return $this->endpointSmsByEndpointIdAndSmsIdGetAsyncWithHttpInfo($endpoint_id, $sms_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointSmsByEndpointIdAndSmsIdGetAsyncWithHttpInfo
     *
     * SMS details
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointSmsByEndpointIdAndSmsIdGetAsyncWithHttpInfo($endpoint_id, $sms_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\GetdetailsofSMSresponse';
        $request = $this->endpointSmsByEndpointIdAndSmsIdGetRequest($endpoint_id, $sms_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointSmsByEndpointIdAndSmsIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  float $sms_id The numeric ID of an SMS (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointSmsByEndpointIdAndSmsIdGetRequest($endpoint_id, $sms_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointSmsByEndpointIdAndSmsIdGet'
            );
        }
        // verify the required parameter 'sms_id' is set
        if ($sms_id === null || (is_array($sms_id) && count($sms_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sms_id when calling endpointSmsByEndpointIdAndSmsIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/sms/{sms_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($sms_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sms_id' . '}',
                ObjectSerializer::toPathValue($sms_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointSmsByIdGet
     *
     * List sent and received SMS
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\ListofSMSresponse[]
     */
    public function endpointSmsByIdGet($endpoint_id)
    {
        list($response) = $this->endpointSmsByIdGetWithHttpInfo($endpoint_id);
        return $response;
    }

    /**
     * Operation endpointSmsByIdGetWithHttpInfo
     *
     * List sent and received SMS
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\ListofSMSresponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointSmsByIdGetWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\ListofSMSresponse[]';
        $request = $this->endpointSmsByIdGetRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\ListofSMSresponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointSmsByIdGetAsync
     *
     * List sent and received SMS
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointSmsByIdGetAsync($endpoint_id)
    {
        return $this->endpointSmsByIdGetAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointSmsByIdGetAsyncWithHttpInfo
     *
     * List sent and received SMS
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointSmsByIdGetAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\ListofSMSresponse[]';
        $request = $this->endpointSmsByIdGetRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointSmsByIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointSmsByIdGetRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointSmsByIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointSmsByIdPost
     *
     * Send SMS to an Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\SubmitMTSMSrequest $body body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointSmsByIdPost($body, $endpoint_id)
    {
        $this->endpointSmsByIdPostWithHttpInfo($body, $endpoint_id);
    }

    /**
     * Operation endpointSmsByIdPostWithHttpInfo
     *
     * Send SMS to an Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\SubmitMTSMSrequest $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointSmsByIdPostWithHttpInfo($body, $endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointSmsByIdPostRequest($body, $endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointSmsByIdPostAsync
     *
     * Send SMS to an Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\SubmitMTSMSrequest $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointSmsByIdPostAsync($body, $endpoint_id)
    {
        return $this->endpointSmsByIdPostAsyncWithHttpInfo($body, $endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointSmsByIdPostAsyncWithHttpInfo
     *
     * Send SMS to an Endpoint
     *
     * @param  \Emnify\EmnifySdk\Model\SubmitMTSMSrequest $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointSmsByIdPostAsyncWithHttpInfo($body, $endpoint_id)
    {
        $returnType = '';
        $request = $this->endpointSmsByIdPostRequest($body, $endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointSmsByIdPost'
     *
     * @param  \Emnify\EmnifySdk\Model\SubmitMTSMSrequest $body (required)
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointSmsByIdPostRequest($body, $endpoint_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling endpointSmsByIdPost'
            );
        }
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointSmsByIdPost'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointStatsByIdGet
     *
     * Endpoint Usage and Cost Statistics
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\RetrieveEndpointStatisticsresponse
     */
    public function endpointStatsByIdGet($endpoint_id)
    {
        list($response) = $this->endpointStatsByIdGetWithHttpInfo($endpoint_id);
        return $response;
    }

    /**
     * Operation endpointStatsByIdGetWithHttpInfo
     *
     * Endpoint Usage and Cost Statistics
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\RetrieveEndpointStatisticsresponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointStatsByIdGetWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveEndpointStatisticsresponse[]';
        $request = $this->endpointStatsByIdGetRequest($endpoint_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\RetrieveEndpointStatisticsresponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointStatsByIdGetAsync
     *
     * Endpoint Usage and Cost Statistics
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointStatsByIdGetAsync($endpoint_id)
    {
        return $this->endpointStatsByIdGetAsyncWithHttpInfo($endpoint_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointStatsByIdGetAsyncWithHttpInfo
     *
     * Endpoint Usage and Cost Statistics
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointStatsByIdGetAsyncWithHttpInfo($endpoint_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveEndpointStatisticsresponse';
        $request = $this->endpointStatsByIdGetRequest($endpoint_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointStatsByIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointStatsByIdGetRequest($endpoint_id)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointStatsByIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointStatsDailyByIdGet
     *
     * Daily Endpoint Usage Statistics
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function endpointStatsDailyByIdGet($endpoint_id, $start_date = null, $end_date = null)
    {
        $this->endpointStatsDailyByIdGetWithHttpInfo($endpoint_id, $start_date, $end_date);
    }

    /**
     * Operation endpointStatsDailyByIdGetWithHttpInfo
     *
     * Daily Endpoint Usage Statistics
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointStatsDailyByIdGetWithHttpInfo($endpoint_id, $start_date = null, $end_date = null)
    {
        $returnType = '';
        $request = $this->endpointStatsDailyByIdGetRequest($endpoint_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation endpointStatsDailyByIdGetAsync
     *
     * Daily Endpoint Usage Statistics
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointStatsDailyByIdGetAsync($endpoint_id, $start_date = null, $end_date = null)
    {
        return $this->endpointStatsDailyByIdGetAsyncWithHttpInfo($endpoint_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointStatsDailyByIdGetAsyncWithHttpInfo
     *
     * Daily Endpoint Usage Statistics
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointStatsDailyByIdGetAsyncWithHttpInfo($endpoint_id, $start_date = null, $end_date = null)
    {
        $returnType = '';
        $request = $this->endpointStatsDailyByIdGetRequest($endpoint_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointStatsDailyByIdGet'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointStatsDailyByIdGetRequest($endpoint_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling endpointStatsDailyByIdGet'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/stats/daily';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date, null);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date, null);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation endpointStatusGet
     *
     * List Endpoint Statuses
     *
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\Status[]
     */
    public function endpointStatusGet()
    {
        list($response) = $this->endpointStatusGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation endpointStatusGetWithHttpInfo
     *
     * List Endpoint Statuses
     *
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\Status[], HTTP status code, HTTP response headers (array of strings)
     */
    public function endpointStatusGetWithHttpInfo()
    {
        $returnType = '\Emnify\EmnifySdk\Model\Status[]';
        $request = $this->endpointStatusGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\Status[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation endpointStatusGetAsync
     *
     * List Endpoint Statuses
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointStatusGetAsync()
    {
        return $this->endpointStatusGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation endpointStatusGetAsyncWithHttpInfo
     *
     * List Endpoint Statuses
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function endpointStatusGetAsyncWithHttpInfo()
    {
        $returnType = '\Emnify\EmnifySdk\Model\Status[]';
        $request = $this->endpointStatusGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'endpointStatusGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function endpointStatusGetRequest()
    {

        $resourcePath = '/api/v1/endpoint/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConnectivityInfoByEndpointId
     *
     * Connectivity Info of an Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  bool $subscriber If true, the Subscriber connectivity info is retrieved. Default is true, i.e. subscriber&#x3D;true (optional)
     * @param  bool $ussd If true, the USSD connectivity info is retrieved. Default is false, i.e. ussd&#x3D;false (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\RetrieveConnectivityInformationresponse
     */
    public function getConnectivityInfoByEndpointId($endpoint_id, $subscriber = null, $ussd = null)
    {
        list($response) = $this->getConnectivityInfoByEndpointIdWithHttpInfo($endpoint_id, $subscriber, $ussd);
        return $response;
    }

    /**
     * Operation getConnectivityInfoByEndpointIdWithHttpInfo
     *
     * Connectivity Info of an Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  bool $subscriber If true, the Subscriber connectivity info is retrieved. Default is true, i.e. subscriber&#x3D;true (optional)
     * @param  bool $ussd If true, the USSD connectivity info is retrieved. Default is false, i.e. ussd&#x3D;false (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\RetrieveConnectivityInformationresponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConnectivityInfoByEndpointIdWithHttpInfo($endpoint_id, $subscriber = null, $ussd = null)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveConnectivityInformationresponse';
        $request = $this->getConnectivityInfoByEndpointIdRequest($endpoint_id, $subscriber, $ussd);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\RetrieveConnectivityInformationresponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\CreateCloudConnectVPNRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\CreateCloudConnectVPNRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConnectivityInfoByEndpointIdAsync
     *
     * Connectivity Info of an Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  bool $subscriber If true, the Subscriber connectivity info is retrieved. Default is true, i.e. subscriber&#x3D;true (optional)
     * @param  bool $ussd If true, the USSD connectivity info is retrieved. Default is false, i.e. ussd&#x3D;false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectivityInfoByEndpointIdAsync($endpoint_id, $subscriber = null, $ussd = null)
    {
        return $this->getConnectivityInfoByEndpointIdAsyncWithHttpInfo($endpoint_id, $subscriber, $ussd)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConnectivityInfoByEndpointIdAsyncWithHttpInfo
     *
     * Connectivity Info of an Endpoint
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  bool $subscriber If true, the Subscriber connectivity info is retrieved. Default is true, i.e. subscriber&#x3D;true (optional)
     * @param  bool $ussd If true, the USSD connectivity info is retrieved. Default is false, i.e. ussd&#x3D;false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConnectivityInfoByEndpointIdAsyncWithHttpInfo($endpoint_id, $subscriber = null, $ussd = null)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveConnectivityInformationresponse';
        $request = $this->getConnectivityInfoByEndpointIdRequest($endpoint_id, $subscriber, $ussd);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConnectivityInfoByEndpointId'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  bool $subscriber If true, the Subscriber connectivity info is retrieved. Default is true, i.e. subscriber&#x3D;true (optional)
     * @param  bool $ussd If true, the USSD connectivity info is retrieved. Default is false, i.e. ussd&#x3D;false (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConnectivityInfoByEndpointIdRequest($endpoint_id, $subscriber = null, $ussd = null)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling getConnectivityInfoByEndpointId'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/connectivity_info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($subscriber !== null) {
            $queryParams['subscriber'] = ObjectSerializer::toQueryValue($subscriber, null);
        }
        // query params
        if ($ussd !== null) {
            $queryParams['ussd'] = ObjectSerializer::toQueryValue($ussd, null);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpoints
     *
     * List Endpoints
     *
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;status&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60; * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;created&#x60; * &#x60;last_updated&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;eid&#x60; * &#x60;sim_status&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the following fields:  * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;status&#x60; * &#x60;last_updated&#x60; * &#x60;created&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;eid&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\Endpoint[]
     */
    public function getEndpoints($q = null, $sort = null, $page = null, $per_page = null)
    {
        list($response) = $this->getEndpointsWithHttpInfo($q, $sort, $page, $per_page);
        return $response;
    }

    /**
     * Operation getEndpointsWithHttpInfo
     *
     * List Endpoints
     *
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;status&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60; * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;created&#x60; * &#x60;last_updated&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;eid&#x60; * &#x60;sim_status&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the following fields:  * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;status&#x60; * &#x60;last_updated&#x60; * &#x60;created&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;eid&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\Endpoint[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointsWithHttpInfo($q = null, $sort = null, $page = null, $per_page = null)
    {
        $returnType = '\Emnify\EmnifySdk\Model\Endpoint[]';
        $request = $this->getEndpointsRequest($q, $sort, $page, $per_page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\Endpoint[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndpointsAsync
     *
     * List Endpoints
     *
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;status&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60; * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;created&#x60; * &#x60;last_updated&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;eid&#x60; * &#x60;sim_status&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the following fields:  * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;status&#x60; * &#x60;last_updated&#x60; * &#x60;created&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;eid&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointsAsync($q = null, $sort = null, $page = null, $per_page = null)
    {
        return $this->getEndpointsAsyncWithHttpInfo($q, $sort, $page, $per_page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointsAsyncWithHttpInfo
     *
     * List Endpoints
     *
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;status&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60; * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;created&#x60; * &#x60;last_updated&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;eid&#x60; * &#x60;sim_status&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the following fields:  * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;status&#x60; * &#x60;last_updated&#x60; * &#x60;created&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;eid&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointsAsyncWithHttpInfo($q = null, $sort = null, $page = null, $per_page = null)
    {
        $returnType = '\Emnify\EmnifySdk\Model\Endpoint[]';
        $request = $this->getEndpointsRequest($q, $sort, $page, $per_page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpoints'
     *
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;status&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60; * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;created&#x60; * &#x60;last_updated&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;eid&#x60; * &#x60;sim_status&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the following fields:  * &#x60;id&#x60; * &#x60;name&#x60; * &#x60;status&#x60; * &#x60;last_updated&#x60; * &#x60;created&#x60; * &#x60;tags&#x60; * &#x60;ip_address&#x60; * &#x60;imei&#x60; * &#x60;eid&#x60; * &#x60;service_profile&#x60; * &#x60;tariff_profile&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEndpointsRequest($q = null, $sort = null, $page = null, $per_page = null)
    {

        $resourcePath = '/api/v1/endpoint';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEndpointConnectivityById
     *
     * Reset Endpoint Connectivity
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpointConnectivityByIdRequest $body body (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEndpointConnectivityById($endpoint_id, $body = null)
    {
        $this->updateEndpointConnectivityByIdWithHttpInfo($endpoint_id, $body);
    }

    /**
     * Operation updateEndpointConnectivityByIdWithHttpInfo
     *
     * Reset Endpoint Connectivity
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpointConnectivityByIdRequest $body (optional)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEndpointConnectivityByIdWithHttpInfo($endpoint_id, $body = null)
    {
        $returnType = '';
        $request = $this->updateEndpointConnectivityByIdRequest($endpoint_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateEndpointConnectivityByIdAsync
     *
     * Reset Endpoint Connectivity
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpointConnectivityByIdRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEndpointConnectivityByIdAsync($endpoint_id, $body = null)
    {
        return $this->updateEndpointConnectivityByIdAsyncWithHttpInfo($endpoint_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEndpointConnectivityByIdAsyncWithHttpInfo
     *
     * Reset Endpoint Connectivity
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpointConnectivityByIdRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEndpointConnectivityByIdAsyncWithHttpInfo($endpoint_id, $body = null)
    {
        $returnType = '';
        $request = $this->updateEndpointConnectivityByIdRequest($endpoint_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEndpointConnectivityById'
     *
     * @param  int $endpoint_id Numeric ID of an endpoint (required)
     * @param  \Emnify\EmnifySdk\Model\UpdateEndpointConnectivityByIdRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateEndpointConnectivityByIdRequest($endpoint_id, $body = null)
    {
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling updateEndpointConnectivityById'
            );
        }

        $resourcePath = '/api/v1/endpoint/{endpoint_id}/connectivity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // // this endpoint requires Bearer token
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
