<?php
/**
 * TariffProfilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/Emnify/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/Emnify/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/Emnify/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace Emnify\EmnifySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Emnify\EmnifySdk\ApiException;
use Emnify\EmnifySdk\Configuration;
use Emnify\EmnifySdk\HeaderSelector;
use Emnify\EmnifySdk\ObjectSerializer;

/**
 * TariffProfilesApi Class Doc Comment
 *
 * @category Class
 * @package  Emnify\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/Emnify/emnify-php-sdk
 */
class TariffProfilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation tariffProfileByIdDelete
     *
     * Delete Tariff Profile
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tariffProfileByIdDelete($tariff_profile_id)
    {
        $this->tariffProfileByIdDeleteWithHttpInfo($tariff_profile_id);
    }

    /**
     * Operation tariffProfileByIdDeleteWithHttpInfo
     *
     * Delete Tariff Profile
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileByIdDeleteWithHttpInfo($tariff_profile_id)
    {
        $returnType = '';
        $request = $this->tariffProfileByIdDeleteRequest($tariff_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileByIdDeleteAsync
     *
     * Delete Tariff Profile
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileByIdDeleteAsync($tariff_profile_id)
    {
        return $this->tariffProfileByIdDeleteAsyncWithHttpInfo($tariff_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileByIdDeleteAsyncWithHttpInfo
     *
     * Delete Tariff Profile
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileByIdDeleteAsyncWithHttpInfo($tariff_profile_id)
    {
        $returnType = '';
        $request = $this->tariffProfileByIdDeleteRequest($tariff_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileByIdDelete'
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileByIdDeleteRequest($tariff_profile_id)
    {
        // verify the required parameter 'tariff_profile_id' is set
        if ($tariff_profile_id === null || (is_array($tariff_profile_id) && count($tariff_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tariff_profile_id when calling tariffProfileByIdDelete'
            );
        }

        $resourcePath = '/api/v1/tariff_profile/{tariff_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tariff_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tariff_profile_id' . '}',
                ObjectSerializer::toPathValue($tariff_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfileByIdGet
     *
     * Tariff Profile Details
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\TariffProfile2
     */
    public function tariffProfileByIdGet($tariff_profile_id)
    {
        list($response) = $this->tariffProfileByIdGetWithHttpInfo($tariff_profile_id);
        return $response;
    }

    /**
     * Operation tariffProfileByIdGetWithHttpInfo
     *
     * Tariff Profile Details
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\TariffProfile2, HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileByIdGetWithHttpInfo($tariff_profile_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\TariffProfile2';
        $request = $this->tariffProfileByIdGetRequest($tariff_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\TariffProfile2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileByIdGetAsync
     *
     * Tariff Profile Details
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileByIdGetAsync($tariff_profile_id)
    {
        return $this->tariffProfileByIdGetAsyncWithHttpInfo($tariff_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileByIdGetAsyncWithHttpInfo
     *
     * Tariff Profile Details
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileByIdGetAsyncWithHttpInfo($tariff_profile_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\TariffProfile2';
        $request = $this->tariffProfileByIdGetRequest($tariff_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileByIdGet'
     *
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileByIdGetRequest($tariff_profile_id)
    {
        // verify the required parameter 'tariff_profile_id' is set
        if ($tariff_profile_id === null || (is_array($tariff_profile_id) && count($tariff_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tariff_profile_id when calling tariffProfileByIdGet'
            );
        }

        $resourcePath = '/api/v1/tariff_profile/{tariff_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tariff_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tariff_profile_id' . '}',
                ObjectSerializer::toPathValue($tariff_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfileByIdPatch
     *
     * Update Tariff Profile
     *
     * @param  \Emnify\EmnifySdk\Model\PatchTariffProfilerequest $body body (required)
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tariffProfileByIdPatch($body, $tariff_profile_id)
    {
        $this->tariffProfileByIdPatchWithHttpInfo($body, $tariff_profile_id);
    }

    /**
     * Operation tariffProfileByIdPatchWithHttpInfo
     *
     * Update Tariff Profile
     *
     * @param  \Emnify\EmnifySdk\Model\PatchTariffProfilerequest $body (required)
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileByIdPatchWithHttpInfo($body, $tariff_profile_id)
    {
        $returnType = '';
        $request = $this->tariffProfileByIdPatchRequest($body, $tariff_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileByIdPatchAsync
     *
     * Update Tariff Profile
     *
     * @param  \Emnify\EmnifySdk\Model\PatchTariffProfilerequest $body (required)
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileByIdPatchAsync($body, $tariff_profile_id)
    {
        return $this->tariffProfileByIdPatchAsyncWithHttpInfo($body, $tariff_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileByIdPatchAsyncWithHttpInfo
     *
     * Update Tariff Profile
     *
     * @param  \Emnify\EmnifySdk\Model\PatchTariffProfilerequest $body (required)
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileByIdPatchAsyncWithHttpInfo($body, $tariff_profile_id)
    {
        $returnType = '';
        $request = $this->tariffProfileByIdPatchRequest($body, $tariff_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileByIdPatch'
     *
     * @param  \Emnify\EmnifySdk\Model\PatchTariffProfilerequest $body (required)
     * @param  float $tariff_profile_id The numeric ID of a Tariff Profile (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileByIdPatchRequest($body, $tariff_profile_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling tariffProfileByIdPatch'
            );
        }
        // verify the required parameter 'tariff_profile_id' is set
        if ($tariff_profile_id === null || (is_array($tariff_profile_id) && count($tariff_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tariff_profile_id when calling tariffProfileByIdPatch'
            );
        }

        $resourcePath = '/api/v1/tariff_profile/{tariff_profile_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tariff_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tariff_profile_id' . '}',
                ObjectSerializer::toPathValue($tariff_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfileCoverageByTpIdGet
     *
     * List Tariff Profile Coverage
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\RetrieveCoverageresponse[]
     */
    public function tariffProfileCoverageByTpIdGet($tariff_profile_id)
    {
        list($response) = $this->tariffProfileCoverageByTpIdGetWithHttpInfo($tariff_profile_id);
        return $response;
    }

    /**
     * Operation tariffProfileCoverageByTpIdGetWithHttpInfo
     *
     * List Tariff Profile Coverage
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\RetrieveCoverageresponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileCoverageByTpIdGetWithHttpInfo($tariff_profile_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveCoverageresponse[]';
        $request = $this->tariffProfileCoverageByTpIdGetRequest($tariff_profile_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\RetrieveCoverageresponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileCoverageByTpIdGetAsync
     *
     * List Tariff Profile Coverage
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileCoverageByTpIdGetAsync($tariff_profile_id)
    {
        return $this->tariffProfileCoverageByTpIdGetAsyncWithHttpInfo($tariff_profile_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileCoverageByTpIdGetAsyncWithHttpInfo
     *
     * List Tariff Profile Coverage
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileCoverageByTpIdGetAsyncWithHttpInfo($tariff_profile_id)
    {
        $returnType = '\Emnify\EmnifySdk\Model\RetrieveCoverageresponse[]';
        $request = $this->tariffProfileCoverageByTpIdGetRequest($tariff_profile_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileCoverageByTpIdGet'
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileCoverageByTpIdGetRequest($tariff_profile_id)
    {
        // verify the required parameter 'tariff_profile_id' is set
        if ($tariff_profile_id === null || (is_array($tariff_profile_id) && count($tariff_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tariff_profile_id when calling tariffProfileCoverageByTpIdGet'
            );
        }

        $resourcePath = '/api/v1/tariff_profile/{tariff_profile_id}/coverage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tariff_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tariff_profile_id' . '}',
                ObjectSerializer::toPathValue($tariff_profile_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfileGet
     *
     * List Tariff Profiles
     *
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Emnify\EmnifySdk\Model\TariffProfile1[]
     */
    public function tariffProfileGet()
    {
        list($response) = $this->tariffProfileGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation tariffProfileGetWithHttpInfo
     *
     * List Tariff Profiles
     *
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Emnify\EmnifySdk\Model\TariffProfile1[], HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileGetWithHttpInfo()
    {
        $returnType = '\Emnify\EmnifySdk\Model\TariffProfile1[]';
        $request = $this->tariffProfileGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Emnify\EmnifySdk\Model\TariffProfile1[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileGetAsync
     *
     * List Tariff Profiles
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileGetAsync()
    {
        return $this->tariffProfileGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileGetAsyncWithHttpInfo
     *
     * List Tariff Profiles
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileGetAsyncWithHttpInfo()
    {
        $returnType = '\Emnify\EmnifySdk\Model\TariffProfile1[]';
        $request = $this->tariffProfileGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileGetRequest()
    {

        $resourcePath = '/api/v1/tariff_profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfileInclusiveVolumeAssignment
     *
     * Assign Inclusive Volume to Tarriff Profile
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tariffProfileInclusiveVolumeAssignment($tariff_profile_id, $inclusive_volume_id)
    {
        $this->tariffProfileInclusiveVolumeAssignmentWithHttpInfo($tariff_profile_id, $inclusive_volume_id);
    }

    /**
     * Operation tariffProfileInclusiveVolumeAssignmentWithHttpInfo
     *
     * Assign Inclusive Volume to Tarriff Profile
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileInclusiveVolumeAssignmentWithHttpInfo($tariff_profile_id, $inclusive_volume_id)
    {
        $returnType = '';
        $request = $this->tariffProfileInclusiveVolumeAssignmentRequest($tariff_profile_id, $inclusive_volume_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileInclusiveVolumeAssignmentAsync
     *
     * Assign Inclusive Volume to Tarriff Profile
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileInclusiveVolumeAssignmentAsync($tariff_profile_id, $inclusive_volume_id)
    {
        return $this->tariffProfileInclusiveVolumeAssignmentAsyncWithHttpInfo($tariff_profile_id, $inclusive_volume_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileInclusiveVolumeAssignmentAsyncWithHttpInfo
     *
     * Assign Inclusive Volume to Tarriff Profile
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileInclusiveVolumeAssignmentAsyncWithHttpInfo($tariff_profile_id, $inclusive_volume_id)
    {
        $returnType = '';
        $request = $this->tariffProfileInclusiveVolumeAssignmentRequest($tariff_profile_id, $inclusive_volume_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileInclusiveVolumeAssignment'
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileInclusiveVolumeAssignmentRequest($tariff_profile_id, $inclusive_volume_id)
    {
        // verify the required parameter 'tariff_profile_id' is set
        if ($tariff_profile_id === null || (is_array($tariff_profile_id) && count($tariff_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tariff_profile_id when calling tariffProfileInclusiveVolumeAssignment'
            );
        }
        // verify the required parameter 'inclusive_volume_id' is set
        if ($inclusive_volume_id === null || (is_array($inclusive_volume_id) && count($inclusive_volume_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inclusive_volume_id when calling tariffProfileInclusiveVolumeAssignment'
            );
        }

        $resourcePath = '/api/v1/tariff_profile/{tariff_profile_id}/inclusive_volume/{inclusive_volume_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tariff_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tariff_profile_id' . '}',
                ObjectSerializer::toPathValue($tariff_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($inclusive_volume_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inclusive_volume_id' . '}',
                ObjectSerializer::toPathValue($inclusive_volume_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfileInclusiveVolumeRemoveAssignment
     *
     * Unassign Inclusive Volume from Tariff Profile
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tariffProfileInclusiveVolumeRemoveAssignment($tariff_profile_id, $inclusive_volume_id)
    {
        $this->tariffProfileInclusiveVolumeRemoveAssignmentWithHttpInfo($tariff_profile_id, $inclusive_volume_id);
    }

    /**
     * Operation tariffProfileInclusiveVolumeRemoveAssignmentWithHttpInfo
     *
     * Unassign Inclusive Volume from Tariff Profile
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileInclusiveVolumeRemoveAssignmentWithHttpInfo($tariff_profile_id, $inclusive_volume_id)
    {
        $returnType = '';
        $request = $this->tariffProfileInclusiveVolumeRemoveAssignmentRequest($tariff_profile_id, $inclusive_volume_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileInclusiveVolumeRemoveAssignmentAsync
     *
     * Unassign Inclusive Volume from Tariff Profile
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileInclusiveVolumeRemoveAssignmentAsync($tariff_profile_id, $inclusive_volume_id)
    {
        return $this->tariffProfileInclusiveVolumeRemoveAssignmentAsyncWithHttpInfo($tariff_profile_id, $inclusive_volume_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileInclusiveVolumeRemoveAssignmentAsyncWithHttpInfo
     *
     * Unassign Inclusive Volume from Tariff Profile
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileInclusiveVolumeRemoveAssignmentAsyncWithHttpInfo($tariff_profile_id, $inclusive_volume_id)
    {
        $returnType = '';
        $request = $this->tariffProfileInclusiveVolumeRemoveAssignmentRequest($tariff_profile_id, $inclusive_volume_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileInclusiveVolumeRemoveAssignment'
     *
     * @param  float $tariff_profile_id Tariff Profile ID (required)
     * @param  float $inclusive_volume_id Inclusive Volume ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileInclusiveVolumeRemoveAssignmentRequest($tariff_profile_id, $inclusive_volume_id)
    {
        // verify the required parameter 'tariff_profile_id' is set
        if ($tariff_profile_id === null || (is_array($tariff_profile_id) && count($tariff_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tariff_profile_id when calling tariffProfileInclusiveVolumeRemoveAssignment'
            );
        }
        // verify the required parameter 'inclusive_volume_id' is set
        if ($inclusive_volume_id === null || (is_array($inclusive_volume_id) && count($inclusive_volume_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inclusive_volume_id when calling tariffProfileInclusiveVolumeRemoveAssignment'
            );
        }

        $resourcePath = '/api/v1/tariff_profile/{tariff_profile_id}/inclusive_volume/{inclusive_volume_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tariff_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tariff_profile_id' . '}',
                ObjectSerializer::toPathValue($tariff_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($inclusive_volume_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inclusive_volume_id' . '}',
                ObjectSerializer::toPathValue($inclusive_volume_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfilePost
     *
     * Create Tariff Profile
     *
     * @param  \Emnify\EmnifySdk\Model\CreateTariffProfilerequest $body body (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tariffProfilePost($body)
    {
        $this->tariffProfilePostWithHttpInfo($body);
    }

    /**
     * Operation tariffProfilePostWithHttpInfo
     *
     * Create Tariff Profile
     *
     * @param  \Emnify\EmnifySdk\Model\CreateTariffProfilerequest $body (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfilePostWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->tariffProfilePostRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfilePostAsync
     *
     * Create Tariff Profile
     *
     * @param  \Emnify\EmnifySdk\Model\CreateTariffProfilerequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfilePostAsync($body)
    {
        return $this->tariffProfilePostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfilePostAsyncWithHttpInfo
     *
     * Create Tariff Profile
     *
     * @param  \Emnify\EmnifySdk\Model\CreateTariffProfilerequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfilePostAsyncWithHttpInfo($body)
    {
        $returnType = '';
        $request = $this->tariffProfilePostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfilePost'
     *
     * @param  \Emnify\EmnifySdk\Model\CreateTariffProfilerequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfilePostRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling tariffProfilePost'
            );
        }

        $resourcePath = '/api/v1/tariff_profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfileRatezoneSelectionByTpIdAndRzIdDelete
     *
     * Delete Ratezone from Tariff Profile
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tariffProfileRatezoneSelectionByTpIdAndRzIdDelete($tariff_profile_id, $ratezone_id)
    {
        $this->tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteWithHttpInfo($tariff_profile_id, $ratezone_id);
    }

    /**
     * Operation tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteWithHttpInfo
     *
     * Delete Ratezone from Tariff Profile
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteWithHttpInfo($tariff_profile_id, $ratezone_id)
    {
        $returnType = '';
        $request = $this->tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteRequest($tariff_profile_id, $ratezone_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteAsync
     *
     * Delete Ratezone from Tariff Profile
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteAsync($tariff_profile_id, $ratezone_id)
    {
        return $this->tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteAsyncWithHttpInfo($tariff_profile_id, $ratezone_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteAsyncWithHttpInfo
     *
     * Delete Ratezone from Tariff Profile
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteAsyncWithHttpInfo($tariff_profile_id, $ratezone_id)
    {
        $returnType = '';
        $request = $this->tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteRequest($tariff_profile_id, $ratezone_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileRatezoneSelectionByTpIdAndRzIdDelete'
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileRatezoneSelectionByTpIdAndRzIdDeleteRequest($tariff_profile_id, $ratezone_id)
    {
        // verify the required parameter 'tariff_profile_id' is set
        if ($tariff_profile_id === null || (is_array($tariff_profile_id) && count($tariff_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tariff_profile_id when calling tariffProfileRatezoneSelectionByTpIdAndRzIdDelete'
            );
        }
        // verify the required parameter 'ratezone_id' is set
        if ($ratezone_id === null || (is_array($ratezone_id) && count($ratezone_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ratezone_id when calling tariffProfileRatezoneSelectionByTpIdAndRzIdDelete'
            );
        }

        $resourcePath = '/api/v1/tariff_profile/{tariff_profile_id}/ratezone_selection/{ratezone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tariff_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tariff_profile_id' . '}',
                ObjectSerializer::toPathValue($tariff_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($ratezone_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ratezone_id' . '}',
                ObjectSerializer::toPathValue($ratezone_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation tariffProfileRatezoneSelectionByTpIdAndRzIdPut
     *
     * Assign Ratezone to Tarriff Profile
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function tariffProfileRatezoneSelectionByTpIdAndRzIdPut($tariff_profile_id, $ratezone_id)
    {
        $this->tariffProfileRatezoneSelectionByTpIdAndRzIdPutWithHttpInfo($tariff_profile_id, $ratezone_id);
    }

    /**
     * Operation tariffProfileRatezoneSelectionByTpIdAndRzIdPutWithHttpInfo
     *
     * Assign Ratezone to Tarriff Profile
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \Emnify\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function tariffProfileRatezoneSelectionByTpIdAndRzIdPutWithHttpInfo($tariff_profile_id, $ratezone_id)
    {
        $returnType = '';
        $request = $this->tariffProfileRatezoneSelectionByTpIdAndRzIdPutRequest($tariff_profile_id, $ratezone_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation tariffProfileRatezoneSelectionByTpIdAndRzIdPutAsync
     *
     * Assign Ratezone to Tarriff Profile
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileRatezoneSelectionByTpIdAndRzIdPutAsync($tariff_profile_id, $ratezone_id)
    {
        return $this->tariffProfileRatezoneSelectionByTpIdAndRzIdPutAsyncWithHttpInfo($tariff_profile_id, $ratezone_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tariffProfileRatezoneSelectionByTpIdAndRzIdPutAsyncWithHttpInfo
     *
     * Assign Ratezone to Tarriff Profile
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function tariffProfileRatezoneSelectionByTpIdAndRzIdPutAsyncWithHttpInfo($tariff_profile_id, $ratezone_id)
    {
        $returnType = '';
        $request = $this->tariffProfileRatezoneSelectionByTpIdAndRzIdPutRequest($tariff_profile_id, $ratezone_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'tariffProfileRatezoneSelectionByTpIdAndRzIdPut'
     *
     * @param  float $tariff_profile_id tariff profile ID (required)
     * @param  float $ratezone_id ratezone ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function tariffProfileRatezoneSelectionByTpIdAndRzIdPutRequest($tariff_profile_id, $ratezone_id)
    {
        // verify the required parameter 'tariff_profile_id' is set
        if ($tariff_profile_id === null || (is_array($tariff_profile_id) && count($tariff_profile_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tariff_profile_id when calling tariffProfileRatezoneSelectionByTpIdAndRzIdPut'
            );
        }
        // verify the required parameter 'ratezone_id' is set
        if ($ratezone_id === null || (is_array($ratezone_id) && count($ratezone_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ratezone_id when calling tariffProfileRatezoneSelectionByTpIdAndRzIdPut'
            );
        }

        $resourcePath = '/api/v1/tariff_profile/{tariff_profile_id}/ratezone_selection/{ratezone_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tariff_profile_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tariff_profile_id' . '}',
                ObjectSerializer::toPathValue($tariff_profile_id),
                $resourcePath
            );
        }
        // path params
        if ($ratezone_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ratezone_id' . '}',
                ObjectSerializer::toPathValue($ratezone_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
