<?php
/**
 * OrganisationApi
 * PHP version 5
 *
 * @category Class
 * @package  CodericEcosystem\EmnifySdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace CodericEcosystem\EmnifySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CodericEcosystem\EmnifySdk\ApiException;
use CodericEcosystem\EmnifySdk\Configuration;
use CodericEcosystem\EmnifySdk\HeaderSelector;
use CodericEcosystem\EmnifySdk\ObjectSerializer;

/**
 * OrganisationApi Class Doc Comment
 *
 * @category Class
 * @package  CodericEcosystem\EmnifySdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganisationApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation assignRatezoneInclusiveVolume
     *
     * Assign a ratezone inclusive volume to an organisation
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  float $inclusive_volume_id Numerical ID of a ratezone inclusive volume. Can be retrieved using &#x60;GET /api/v1/tariff/{tariff_id}/ratezone/{ratezone_id}/inclusive_volume&#x60;. (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\InclusiveVolumeInclusiveVolumeIdBody $body body (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\InlineResponse201
     */
    public function assignRatezoneInclusiveVolume($org_id_or_my, $inclusive_volume_id, $body = null)
    {
        list($response) = $this->assignRatezoneInclusiveVolumeWithHttpInfo($org_id_or_my, $inclusive_volume_id, $body);
        return $response;
    }

    /**
     * Operation assignRatezoneInclusiveVolumeWithHttpInfo
     *
     * Assign a ratezone inclusive volume to an organisation
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  float $inclusive_volume_id Numerical ID of a ratezone inclusive volume. Can be retrieved using &#x60;GET /api/v1/tariff/{tariff_id}/ratezone/{ratezone_id}/inclusive_volume&#x60;. (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\InclusiveVolumeInclusiveVolumeIdBody $body (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\InlineResponse201, HTTP status code, HTTP response headers (array of strings)
     */
    public function assignRatezoneInclusiveVolumeWithHttpInfo($org_id_or_my, $inclusive_volume_id, $body = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\InlineResponse201';
        $request = $this->assignRatezoneInclusiveVolumeRequest($org_id_or_my, $inclusive_volume_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\InlineResponse201',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation assignRatezoneInclusiveVolumeAsync
     *
     * Assign a ratezone inclusive volume to an organisation
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  float $inclusive_volume_id Numerical ID of a ratezone inclusive volume. Can be retrieved using &#x60;GET /api/v1/tariff/{tariff_id}/ratezone/{ratezone_id}/inclusive_volume&#x60;. (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\InclusiveVolumeInclusiveVolumeIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignRatezoneInclusiveVolumeAsync($org_id_or_my, $inclusive_volume_id, $body = null)
    {
        return $this->assignRatezoneInclusiveVolumeAsyncWithHttpInfo($org_id_or_my, $inclusive_volume_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation assignRatezoneInclusiveVolumeAsyncWithHttpInfo
     *
     * Assign a ratezone inclusive volume to an organisation
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  float $inclusive_volume_id Numerical ID of a ratezone inclusive volume. Can be retrieved using &#x60;GET /api/v1/tariff/{tariff_id}/ratezone/{ratezone_id}/inclusive_volume&#x60;. (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\InclusiveVolumeInclusiveVolumeIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function assignRatezoneInclusiveVolumeAsyncWithHttpInfo($org_id_or_my, $inclusive_volume_id, $body = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\InlineResponse201';
        $request = $this->assignRatezoneInclusiveVolumeRequest($org_id_or_my, $inclusive_volume_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'assignRatezoneInclusiveVolume'
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  float $inclusive_volume_id Numerical ID of a ratezone inclusive volume. Can be retrieved using &#x60;GET /api/v1/tariff/{tariff_id}/ratezone/{ratezone_id}/inclusive_volume&#x60;. (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\InclusiveVolumeInclusiveVolumeIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function assignRatezoneInclusiveVolumeRequest($org_id_or_my, $inclusive_volume_id, $body = null)
    {
        // verify the required parameter 'org_id_or_my' is set
        if ($org_id_or_my === null || (is_array($org_id_or_my) && count($org_id_or_my) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_id_or_my when calling assignRatezoneInclusiveVolume'
            );
        }
        // verify the required parameter 'inclusive_volume_id' is set
        if ($inclusive_volume_id === null || (is_array($inclusive_volume_id) && count($inclusive_volume_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inclusive_volume_id when calling assignRatezoneInclusiveVolume'
            );
        }

        $resourcePath = '/api/v1/organisation/{org_id_or_my}/inclusive_volume/{inclusive_volume_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($org_id_or_my !== null) {
            $resourcePath = str_replace(
                '{' . 'org_id_or_my' . '}',
                ObjectSerializer::toPathValue($org_id_or_my),
                $resourcePath
            );
        }
        // path params
        if ($inclusive_volume_id !== null) {
            $resourcePath = str_replace(
                '{' . 'inclusive_volume_id' . '}',
                ObjectSerializer::toPathValue($inclusive_volume_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getActiveOrganisationInclusiveVolume
     *
     * Get list of active organisation inclusive volumes
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\InlineResponse20013[]
     */
    public function getActiveOrganisationInclusiveVolume($org_id_or_my)
    {
        list($response) = $this->getActiveOrganisationInclusiveVolumeWithHttpInfo($org_id_or_my);
        return $response;
    }

    /**
     * Operation getActiveOrganisationInclusiveVolumeWithHttpInfo
     *
     * Get list of active organisation inclusive volumes
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\InlineResponse20013[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getActiveOrganisationInclusiveVolumeWithHttpInfo($org_id_or_my)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\InlineResponse20013[]';
        $request = $this->getActiveOrganisationInclusiveVolumeRequest($org_id_or_my);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\InlineResponse20013[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getActiveOrganisationInclusiveVolumeAsync
     *
     * Get list of active organisation inclusive volumes
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActiveOrganisationInclusiveVolumeAsync($org_id_or_my)
    {
        return $this->getActiveOrganisationInclusiveVolumeAsyncWithHttpInfo($org_id_or_my)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getActiveOrganisationInclusiveVolumeAsyncWithHttpInfo
     *
     * Get list of active organisation inclusive volumes
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getActiveOrganisationInclusiveVolumeAsyncWithHttpInfo($org_id_or_my)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\InlineResponse20013[]';
        $request = $this->getActiveOrganisationInclusiveVolumeRequest($org_id_or_my);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getActiveOrganisationInclusiveVolume'
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getActiveOrganisationInclusiveVolumeRequest($org_id_or_my)
    {
        // verify the required parameter 'org_id_or_my' is set
        if ($org_id_or_my === null || (is_array($org_id_or_my) && count($org_id_or_my) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_id_or_my when calling getActiveOrganisationInclusiveVolume'
            );
        }

        $resourcePath = '/api/v1/organisation/{org_id_or_my}/inclusive_volume/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($org_id_or_my !== null) {
            $resourcePath = str_replace(
                '{' . 'org_id_or_my' . '}',
                ObjectSerializer::toPathValue($org_id_or_my),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganisationDailyStats
     *
     * Daily organisation traffic and cost statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. If no &#x27;end date&#x27; is provided, data will be returned until the end of the selected month. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\InlineResponse2001[]
     */
    public function getOrganisationDailyStats($org_id_or_my, $start_date = null, $end_date = null)
    {
        list($response) = $this->getOrganisationDailyStatsWithHttpInfo($org_id_or_my, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation getOrganisationDailyStatsWithHttpInfo
     *
     * Daily organisation traffic and cost statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. If no &#x27;end date&#x27; is provided, data will be returned until the end of the selected month. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\InlineResponse2001[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganisationDailyStatsWithHttpInfo($org_id_or_my, $start_date = null, $end_date = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\InlineResponse2001[]';
        $request = $this->getOrganisationDailyStatsRequest($org_id_or_my, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\InlineResponse2001[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganisationDailyStatsAsync
     *
     * Daily organisation traffic and cost statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. If no &#x27;end date&#x27; is provided, data will be returned until the end of the selected month. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganisationDailyStatsAsync($org_id_or_my, $start_date = null, $end_date = null)
    {
        return $this->getOrganisationDailyStatsAsyncWithHttpInfo($org_id_or_my, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganisationDailyStatsAsyncWithHttpInfo
     *
     * Daily organisation traffic and cost statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. If no &#x27;end date&#x27; is provided, data will be returned until the end of the selected month. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganisationDailyStatsAsyncWithHttpInfo($org_id_or_my, $start_date = null, $end_date = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\InlineResponse2001[]';
        $request = $this->getOrganisationDailyStatsRequest($org_id_or_my, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganisationDailyStats'
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. If no &#x27;end date&#x27; is provided, data will be returned until the end of the selected month. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganisationDailyStatsRequest($org_id_or_my, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'org_id_or_my' is set
        if ($org_id_or_my === null || (is_array($org_id_or_my) && count($org_id_or_my) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_id_or_my when calling getOrganisationDailyStats'
            );
        }

        $resourcePath = '/api/v1/organisation/{org_id_or_my}/stats/daily';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date, 'date');
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date, 'date');
        }

        // path params
        if ($org_id_or_my !== null) {
            $resourcePath = str_replace(
                '{' . 'org_id_or_my' . '}',
                ObjectSerializer::toPathValue($org_id_or_my),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganisationHourlyStats
     *
     * Hourly organisation traffic statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. Will be set to current time - 3 hours if left empty. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. Will be set to current time + 1 hour if left empty. (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\GetHourlyOrganisationStatsResponse
     */
    public function getOrganisationHourlyStats($org_id_or_my, $start_date = null, $end_date = null)
    {
        list($response) = $this->getOrganisationHourlyStatsWithHttpInfo($org_id_or_my, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation getOrganisationHourlyStatsWithHttpInfo
     *
     * Hourly organisation traffic statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. Will be set to current time - 3 hours if left empty. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. Will be set to current time + 1 hour if left empty. (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\GetHourlyOrganisationStatsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganisationHourlyStatsWithHttpInfo($org_id_or_my, $start_date = null, $end_date = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\GetHourlyOrganisationStatsResponse';
        $request = $this->getOrganisationHourlyStatsRequest($org_id_or_my, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\GetHourlyOrganisationStatsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganisationHourlyStatsAsync
     *
     * Hourly organisation traffic statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. Will be set to current time - 3 hours if left empty. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. Will be set to current time + 1 hour if left empty. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganisationHourlyStatsAsync($org_id_or_my, $start_date = null, $end_date = null)
    {
        return $this->getOrganisationHourlyStatsAsyncWithHttpInfo($org_id_or_my, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganisationHourlyStatsAsyncWithHttpInfo
     *
     * Hourly organisation traffic statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. Will be set to current time - 3 hours if left empty. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. Will be set to current time + 1 hour if left empty. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganisationHourlyStatsAsyncWithHttpInfo($org_id_or_my, $start_date = null, $end_date = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\GetHourlyOrganisationStatsResponse';
        $request = $this->getOrganisationHourlyStatsRequest($org_id_or_my, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganisationHourlyStats'
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     * @param  \DateTime $start_date Filters the returned data by a start date. Will be set to current time - 3 hours if left empty. (optional)
     * @param  \DateTime $end_date Returned data will be filtered to only show results occurring before the end date. Will be set to current time + 1 hour if left empty. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganisationHourlyStatsRequest($org_id_or_my, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'org_id_or_my' is set
        if ($org_id_or_my === null || (is_array($org_id_or_my) && count($org_id_or_my) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_id_or_my when calling getOrganisationHourlyStats'
            );
        }

        $resourcePath = '/api/v1/organisation/{org_id_or_my}/stats/hourly';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date, 'date');
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date, 'date');
        }

        // path params
        if ($org_id_or_my !== null) {
            $resourcePath = str_replace(
                '{' . 'org_id_or_my' . '}',
                ObjectSerializer::toPathValue($org_id_or_my),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrganisationMonthlyStats
     *
     * Monthly organisation traffic and cost statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\GetMonthlyOrganisationStatsResponse
     */
    public function getOrganisationMonthlyStats($org_id_or_my)
    {
        list($response) = $this->getOrganisationMonthlyStatsWithHttpInfo($org_id_or_my);
        return $response;
    }

    /**
     * Operation getOrganisationMonthlyStatsWithHttpInfo
     *
     * Monthly organisation traffic and cost statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\GetMonthlyOrganisationStatsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganisationMonthlyStatsWithHttpInfo($org_id_or_my)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\GetMonthlyOrganisationStatsResponse';
        $request = $this->getOrganisationMonthlyStatsRequest($org_id_or_my);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\GetMonthlyOrganisationStatsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrganisationMonthlyStatsAsync
     *
     * Monthly organisation traffic and cost statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganisationMonthlyStatsAsync($org_id_or_my)
    {
        return $this->getOrganisationMonthlyStatsAsyncWithHttpInfo($org_id_or_my)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrganisationMonthlyStatsAsyncWithHttpInfo
     *
     * Monthly organisation traffic and cost statistics
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrganisationMonthlyStatsAsyncWithHttpInfo($org_id_or_my)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\GetMonthlyOrganisationStatsResponse';
        $request = $this->getOrganisationMonthlyStatsRequest($org_id_or_my);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrganisationMonthlyStats'
     *
     * @param  string $org_id_or_my Numerical ID of an Organisation or the string &#x60;my&#x60; to use the currently authorized organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrganisationMonthlyStatsRequest($org_id_or_my)
    {
        // verify the required parameter 'org_id_or_my' is set
        if ($org_id_or_my === null || (is_array($org_id_or_my) && count($org_id_or_my) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_id_or_my when calling getOrganisationMonthlyStats'
            );
        }

        $resourcePath = '/api/v1/organisation/{org_id_or_my}/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($org_id_or_my !== null) {
            $resourcePath = str_replace(
                '{' . 'org_id_or_my' . '}',
                ObjectSerializer::toPathValue($org_id_or_my),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation myOrganisationGet
     *
     * My Organisation Details
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\InlineResponse200
     */
    public function myOrganisationGet()
    {
        list($response) = $this->myOrganisationGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation myOrganisationGetWithHttpInfo
     *
     * My Organisation Details
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function myOrganisationGetWithHttpInfo()
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\InlineResponse200';
        $request = $this->myOrganisationGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation myOrganisationGetAsync
     *
     * My Organisation Details
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function myOrganisationGetAsync()
    {
        return $this->myOrganisationGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation myOrganisationGetAsyncWithHttpInfo
     *
     * My Organisation Details
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function myOrganisationGetAsyncWithHttpInfo()
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\InlineResponse200';
        $request = $this->myOrganisationGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'myOrganisationGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function myOrganisationGetRequest()
    {

        $resourcePath = '/api/v1/organisation/my';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation organisationStatusGet
     *
     * List Organisation Status
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\RetrieveOrganisationStatusesresponse[]
     */
    public function organisationStatusGet()
    {
        list($response) = $this->organisationStatusGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation organisationStatusGetWithHttpInfo
     *
     * List Organisation Status
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\RetrieveOrganisationStatusesresponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function organisationStatusGetWithHttpInfo()
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\RetrieveOrganisationStatusesresponse[]';
        $request = $this->organisationStatusGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\RetrieveOrganisationStatusesresponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation organisationStatusGetAsync
     *
     * List Organisation Status
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organisationStatusGetAsync()
    {
        return $this->organisationStatusGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation organisationStatusGetAsyncWithHttpInfo
     *
     * List Organisation Status
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function organisationStatusGetAsyncWithHttpInfo()
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\RetrieveOrganisationStatusesresponse[]';
        $request = $this->organisationStatusGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'organisationStatusGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function organisationStatusGetRequest()
    {

        $resourcePath = '/api/v1/organisation/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation statisticsDailyByIdGet
     *
     * Organisation Usage and Costs Statistics per day for the current month
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return null[]
     */
    public function statisticsDailyByIdGet()
    {
        list($response) = $this->statisticsDailyByIdGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation statisticsDailyByIdGetWithHttpInfo
     *
     * Organisation Usage and Costs Statistics per day for the current month
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null[], HTTP status code, HTTP response headers (array of strings)
     */
    public function statisticsDailyByIdGetWithHttpInfo()
    {
        $returnType = 'null[]';
        $request = $this->statisticsDailyByIdGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'null[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation statisticsDailyByIdGetAsync
     *
     * Organisation Usage and Costs Statistics per day for the current month
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function statisticsDailyByIdGetAsync()
    {
        return $this->statisticsDailyByIdGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation statisticsDailyByIdGetAsyncWithHttpInfo
     *
     * Organisation Usage and Costs Statistics per day for the current month
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function statisticsDailyByIdGetAsyncWithHttpInfo()
    {
        $returnType = 'null[]';
        $request = $this->statisticsDailyByIdGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'statisticsDailyByIdGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function statisticsDailyByIdGetRequest()
    {

        $resourcePath = '/api/v1/stats/daily';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateOrganisationTariff
     *
     * Update assigned tariff
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateTariffRequest $body body (required)
     * @param  float $org_id Numerical ID of an Organisation (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateOrganisationTariff($body, $org_id)
    {
        $this->updateOrganisationTariffWithHttpInfo($body, $org_id);
    }

    /**
     * Operation updateOrganisationTariffWithHttpInfo
     *
     * Update assigned tariff
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateTariffRequest $body (required)
     * @param  float $org_id Numerical ID of an Organisation (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateOrganisationTariffWithHttpInfo($body, $org_id)
    {
        $returnType = '';
        $request = $this->updateOrganisationTariffRequest($body, $org_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateOrganisationTariffAsync
     *
     * Update assigned tariff
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateTariffRequest $body (required)
     * @param  float $org_id Numerical ID of an Organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganisationTariffAsync($body, $org_id)
    {
        return $this->updateOrganisationTariffAsyncWithHttpInfo($body, $org_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateOrganisationTariffAsyncWithHttpInfo
     *
     * Update assigned tariff
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateTariffRequest $body (required)
     * @param  float $org_id Numerical ID of an Organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateOrganisationTariffAsyncWithHttpInfo($body, $org_id)
    {
        $returnType = '';
        $request = $this->updateOrganisationTariffRequest($body, $org_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateOrganisationTariff'
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateTariffRequest $body (required)
     * @param  float $org_id Numerical ID of an Organisation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateOrganisationTariffRequest($body, $org_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateOrganisationTariff'
            );
        }
        // verify the required parameter 'org_id' is set
        if ($org_id === null || (is_array($org_id) && count($org_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org_id when calling updateOrganisationTariff'
            );
        }

        $resourcePath = '/api/v1/organisation/{org_id}/tariff';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($org_id !== null) {
            $resourcePath = str_replace(
                '{' . 'org_id' . '}',
                ObjectSerializer::toPathValue($org_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
