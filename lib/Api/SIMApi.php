<?php
/**
 * SIMApi
 * PHP version 5
 *
 * @category Class
 * @package  CodericEcosystem\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */

/**
 * emnify Rest API
 *
 * Rest API resources of the emnify System.
 *
 * OpenAPI spec version: 1.3
 * 
 * Generated by: https://github.com/CodericEcosystem/emnify-php-sdk.git
 * Swagger Codegen version: 3.0.46
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/CodericEcosystem/emnify-php-sdk
 * Do not edit the class manually.
 */

namespace CodericEcosystem\EmnifySdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use CodericEcosystem\EmnifySdk\ApiException;
use CodericEcosystem\EmnifySdk\Configuration;
use CodericEcosystem\EmnifySdk\HeaderSelector;
use CodericEcosystem\EmnifySdk\ObjectSerializer;

/**
 * SIMApi Class Doc Comment
 *
 * @category Class
 * @package  CodericEcosystem\EmnifySdk
 * @author   Coderic Development Team
 * @link     https://github.com/CodericEcosystem/emnify-php-sdk
 */
class SIMApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getEsimInstallationCode
     *
     * Get the code to install an eSIM
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\ESIMInstallationCodeInJSONFormat
     */
    public function getEsimInstallationCode($sim_id)
    {
        list($response) = $this->getEsimInstallationCodeWithHttpInfo($sim_id);
        return $response;
    }

    /**
     * Operation getEsimInstallationCodeWithHttpInfo
     *
     * Get the code to install an eSIM
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\ESIMInstallationCodeInJSONFormat, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEsimInstallationCodeWithHttpInfo($sim_id)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\ESIMInstallationCodeInJSONFormat';
        $request = $this->getEsimInstallationCodeRequest($sim_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\ESIMInstallationCodeInJSONFormat',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEsimInstallationCodeAsync
     *
     * Get the code to install an eSIM
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEsimInstallationCodeAsync($sim_id)
    {
        return $this->getEsimInstallationCodeAsyncWithHttpInfo($sim_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEsimInstallationCodeAsyncWithHttpInfo
     *
     * Get the code to install an eSIM
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEsimInstallationCodeAsyncWithHttpInfo($sim_id)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\ESIMInstallationCodeInJSONFormat';
        $request = $this->getEsimInstallationCodeRequest($sim_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEsimInstallationCode'
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEsimInstallationCodeRequest($sim_id)
    {
        // verify the required parameter 'sim_id' is set
        if ($sim_id === null || (is_array($sim_id) && count($sim_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sim_id when calling getEsimInstallationCode'
            );
        }

        $resourcePath = '/api/v1/sim/{sim_id}/installation_code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sim_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sim_id' . '}',
                ObjectSerializer::toPathValue($sim_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation registerSIMBatchByBIC
     *
     * Register a given batch by BIC
     *
     * @param  string $bic The bic of the sim batch (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\ActivateBatch $body body (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\SuccessfulBatchActivation
     */
    public function registerSIMBatchByBIC($bic, $body = null)
    {
        list($response) = $this->registerSIMBatchByBICWithHttpInfo($bic, $body);
        return $response;
    }

    /**
     * Operation registerSIMBatchByBICWithHttpInfo
     *
     * Register a given batch by BIC
     *
     * @param  string $bic The bic of the sim batch (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\ActivateBatch $body (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\SuccessfulBatchActivation, HTTP status code, HTTP response headers (array of strings)
     */
    public function registerSIMBatchByBICWithHttpInfo($bic, $body = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\SuccessfulBatchActivation';
        $request = $this->registerSIMBatchByBICRequest($bic, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\SuccessfulBatchActivation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation registerSIMBatchByBICAsync
     *
     * Register a given batch by BIC
     *
     * @param  string $bic The bic of the sim batch (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\ActivateBatch $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerSIMBatchByBICAsync($bic, $body = null)
    {
        return $this->registerSIMBatchByBICAsyncWithHttpInfo($bic, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation registerSIMBatchByBICAsyncWithHttpInfo
     *
     * Register a given batch by BIC
     *
     * @param  string $bic The bic of the sim batch (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\ActivateBatch $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function registerSIMBatchByBICAsyncWithHttpInfo($bic, $body = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\SuccessfulBatchActivation';
        $request = $this->registerSIMBatchByBICRequest($bic, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'registerSIMBatchByBIC'
     *
     * @param  string $bic The bic of the sim batch (required)
     * @param  \CodericEcosystem\EmnifySdk\Model\ActivateBatch $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function registerSIMBatchByBICRequest($bic, $body = null)
    {
        // verify the required parameter 'bic' is set
        if ($bic === null || (is_array($bic) && count($bic) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bic when calling registerSIMBatchByBIC'
            );
        }

        $resourcePath = '/api/v1/sim_batch/bic/{bic}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($bic !== null) {
            $resourcePath = str_replace(
                '{' . 'bic' . '}',
                ObjectSerializer::toPathValue($bic),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sIMStatisticsDailyByIdGet
     *
     * Daily SIM Usage Statistics
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sIMStatisticsDailyByIdGet($sim_id, $start_date = null, $end_date = null)
    {
        $this->sIMStatisticsDailyByIdGetWithHttpInfo($sim_id, $start_date, $end_date);
    }

    /**
     * Operation sIMStatisticsDailyByIdGetWithHttpInfo
     *
     * Daily SIM Usage Statistics
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sIMStatisticsDailyByIdGetWithHttpInfo($sim_id, $start_date = null, $end_date = null)
    {
        $returnType = '';
        $request = $this->sIMStatisticsDailyByIdGetRequest($sim_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation sIMStatisticsDailyByIdGetAsync
     *
     * Daily SIM Usage Statistics
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sIMStatisticsDailyByIdGetAsync($sim_id, $start_date = null, $end_date = null)
    {
        return $this->sIMStatisticsDailyByIdGetAsyncWithHttpInfo($sim_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sIMStatisticsDailyByIdGetAsyncWithHttpInfo
     *
     * Daily SIM Usage Statistics
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sIMStatisticsDailyByIdGetAsyncWithHttpInfo($sim_id, $start_date = null, $end_date = null)
    {
        $returnType = '';
        $request = $this->sIMStatisticsDailyByIdGetRequest($sim_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sIMStatisticsDailyByIdGet'
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  string $start_date Filters by start date, provided in a &#x60;start_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define an end date, the response will include 6 months of data, beginning on the current date. (optional)
     * @param  string $end_date Filters by end date, provided in an &#x60;end_date&#x3D;YYYY-MM-DD&#x60; format.  **Note**: If you don&#x27;t define a start date, the response will only return data from the month indicated in your end date. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sIMStatisticsDailyByIdGetRequest($sim_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'sim_id' is set
        if ($sim_id === null || (is_array($sim_id) && count($sim_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sim_id when calling sIMStatisticsDailyByIdGet'
            );
        }

        $resourcePath = '/api/v1/sim/{sim_id}/stats/daily';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['start_date'] = ObjectSerializer::toQueryValue($start_date, null);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['end_date'] = ObjectSerializer::toQueryValue($end_date, null);
        }

        // path params
        if ($sim_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sim_id' . '}',
                ObjectSerializer::toPathValue($sim_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation simByIdDelete
     *
     * Delete a SIM
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function simByIdDelete($sim_id)
    {
        $this->simByIdDeleteWithHttpInfo($sim_id);
    }

    /**
     * Operation simByIdDeleteWithHttpInfo
     *
     * Delete a SIM
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function simByIdDeleteWithHttpInfo($sim_id)
    {
        $returnType = '';
        $request = $this->simByIdDeleteRequest($sim_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation simByIdDeleteAsync
     *
     * Delete a SIM
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simByIdDeleteAsync($sim_id)
    {
        return $this->simByIdDeleteAsyncWithHttpInfo($sim_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation simByIdDeleteAsyncWithHttpInfo
     *
     * Delete a SIM
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simByIdDeleteAsyncWithHttpInfo($sim_id)
    {
        $returnType = '';
        $request = $this->simByIdDeleteRequest($sim_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'simByIdDelete'
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function simByIdDeleteRequest($sim_id)
    {
        // verify the required parameter 'sim_id' is set
        if ($sim_id === null || (is_array($sim_id) && count($sim_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sim_id when calling simByIdDelete'
            );
        }

        $resourcePath = '/api/v1/sim/{sim_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sim_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sim_id' . '}',
                ObjectSerializer::toPathValue($sim_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation simByIdGet
     *
     * SIM Details
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\SimEntry1
     */
    public function simByIdGet($sim_id)
    {
        list($response) = $this->simByIdGetWithHttpInfo($sim_id);
        return $response;
    }

    /**
     * Operation simByIdGetWithHttpInfo
     *
     * SIM Details
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\SimEntry1, HTTP status code, HTTP response headers (array of strings)
     */
    public function simByIdGetWithHttpInfo($sim_id)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\SimEntry1';
        $request = $this->simByIdGetRequest($sim_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\SimEntry1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation simByIdGetAsync
     *
     * SIM Details
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simByIdGetAsync($sim_id)
    {
        return $this->simByIdGetAsyncWithHttpInfo($sim_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation simByIdGetAsyncWithHttpInfo
     *
     * SIM Details
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simByIdGetAsyncWithHttpInfo($sim_id)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\SimEntry1';
        $request = $this->simByIdGetRequest($sim_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'simByIdGet'
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function simByIdGetRequest($sim_id)
    {
        // verify the required parameter 'sim_id' is set
        if ($sim_id === null || (is_array($sim_id) && count($sim_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sim_id when calling simByIdGet'
            );
        }

        $resourcePath = '/api/v1/sim/{sim_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sim_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sim_id' . '}',
                ObjectSerializer::toPathValue($sim_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation simByIdPatch
     *
     * Update a SIM
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateSIM $body body (required)
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function simByIdPatch($body, $sim_id)
    {
        $this->simByIdPatchWithHttpInfo($body, $sim_id);
    }

    /**
     * Operation simByIdPatchWithHttpInfo
     *
     * Update a SIM
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateSIM $body (required)
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function simByIdPatchWithHttpInfo($body, $sim_id)
    {
        $returnType = '';
        $request = $this->simByIdPatchRequest($body, $sim_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\Model40xResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation simByIdPatchAsync
     *
     * Update a SIM
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateSIM $body (required)
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simByIdPatchAsync($body, $sim_id)
    {
        return $this->simByIdPatchAsyncWithHttpInfo($body, $sim_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation simByIdPatchAsyncWithHttpInfo
     *
     * Update a SIM
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateSIM $body (required)
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simByIdPatchAsyncWithHttpInfo($body, $sim_id)
    {
        $returnType = '';
        $request = $this->simByIdPatchRequest($body, $sim_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'simByIdPatch'
     *
     * @param  \CodericEcosystem\EmnifySdk\Model\UpdateSIM $body (required)
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function simByIdPatchRequest($body, $sim_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling simByIdPatch'
            );
        }
        // verify the required parameter 'sim_id' is set
        if ($sim_id === null || (is_array($sim_id) && count($sim_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sim_id when calling simByIdPatch'
            );
        }

        $resourcePath = '/api/v1/sim/{sim_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sim_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sim_id' . '}',
                ObjectSerializer::toPathValue($sim_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation simEventPagePerPageSortBySimIdAndQGet
     *
     * List SIM Events
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\RetrieveEventsresponse[]
     */
    public function simEventPagePerPageSortBySimIdAndQGet($sim_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        list($response) = $this->simEventPagePerPageSortBySimIdAndQGetWithHttpInfo($sim_id, $page, $per_page, $sort, $q);
        return $response;
    }

    /**
     * Operation simEventPagePerPageSortBySimIdAndQGetWithHttpInfo
     *
     * List SIM Events
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\RetrieveEventsresponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function simEventPagePerPageSortBySimIdAndQGetWithHttpInfo($sim_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\RetrieveEventsresponse[]';
        $request = $this->simEventPagePerPageSortBySimIdAndQGetRequest($sim_id, $page, $per_page, $sort, $q);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\RetrieveEventsresponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation simEventPagePerPageSortBySimIdAndQGetAsync
     *
     * List SIM Events
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simEventPagePerPageSortBySimIdAndQGetAsync($sim_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        return $this->simEventPagePerPageSortBySimIdAndQGetAsyncWithHttpInfo($sim_id, $page, $per_page, $sort, $q)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation simEventPagePerPageSortBySimIdAndQGetAsyncWithHttpInfo
     *
     * List SIM Events
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simEventPagePerPageSortBySimIdAndQGetAsyncWithHttpInfo($sim_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\RetrieveEventsresponse[]';
        $request = $this->simEventPagePerPageSortBySimIdAndQGetRequest($sim_id, $page, $per_page, $sort, $q);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'simEventPagePerPageSortBySimIdAndQGet'
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $sort Sort properties according to a comma separated list of accepted fields. Valid fields are:  * &#x60;id&#x60; - (**event id**) * &#x60;timestamp&#x60; - (**event timestamp**) * &#x60;source&#x60; - (**event source**) * &#x60;severity&#x60; - (**event severity**) * &#x60;alert&#x60; - (**alert status**) * &#x60;organisation&#x60; - (**organisation name**) * &#x60;user&#x60; - (**user id**) * &#x60;endpoint&#x60; - (**endpoint name**) * &#x60;tags&#x60; - (**endpoint tags**) * &#x60;ip_address&#x60; - (**endpoint ip_address**) * &#x60;iccid&#x60; - (**sim iccid**) * &#x60;imsi&#x60; - (**sim imsi**) * &#x60;type&#x60; - (**event type**) (optional)
     * @param  string $q Filter parameter in &#x60;&lt;filter&gt;:&lt;value&gt;&#x60; format. Multiple filters must be in the format of a comma separated list of the following fields:  * &#x60;type&#x60; (**event_type**, numerical) * &#x60;source&#x60; (**event_type**, numerical, e.g. 0 &#x3D; Network), 1 &#x3D; Policy Control, 2 &#x3D; API) * &#x60;severity&#x60; (**event_severity**, numerical, e.g. 0 &#x3D; Info, 1 &#x3D; Warn), 2 &#x3D; Critical) * &#x60;alert&#x60; (boolean, e.g. true, false) * &#x60;description&#x60; (**event description**, string) * &#x60;organisation&#x60; (**organisation name**, string) * &#x60;user&#x60; (**user name**, string) * &#x60;endpoint&#x60; (**endpoint name**, string) * &#x60;tags&#x60; (**endpoint tags**, string) * &#x60;ip_address&#x60; (**endpoint IP address**, valid IPv4/IPv6 address) * &#x60;imei&#x60; (**endpoint imei**, numerical string) * &#x60;iccid&#x60; (**sim iccid**, numerical string) * &#x60;imsi&#x60; (**sim imsi**, numerical string) * &#x60;from&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with until!__) * &#x60;until&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, __only valid with from!__) * &#x60;timestamp&#x60; (**date**, format &#x60;YYYY-MM-DDTHH:mm:ssZ&#x60;, for querying events of 1 day, deprecated in future) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function simEventPagePerPageSortBySimIdAndQGetRequest($sim_id, $page = null, $per_page = null, $sort = null, $q = null)
    {
        // verify the required parameter 'sim_id' is set
        if ($sim_id === null || (is_array($sim_id) && count($sim_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sim_id when calling simEventPagePerPageSortBySimIdAndQGet'
            );
        }

        $resourcePath = '/api/v1/sim/{sim_id}/event';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page, 'int32');
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }

        // path params
        if ($sim_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sim_id' . '}',
                ObjectSerializer::toPathValue($sim_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation simPerPageSortByQAndPageGet
     *
     * List SIMs
     *
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;imsi&#x60; * &#x60;msisdn&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60; * &#x60;eid&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;eid&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\SimEntry[]
     */
    public function simPerPageSortByQAndPageGet($page = null, $per_page = null, $q = null, $sort = null)
    {
        list($response) = $this->simPerPageSortByQAndPageGetWithHttpInfo($page, $per_page, $q, $sort);
        return $response;
    }

    /**
     * Operation simPerPageSortByQAndPageGetWithHttpInfo
     *
     * List SIMs
     *
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;imsi&#x60; * &#x60;msisdn&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60; * &#x60;eid&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;eid&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\SimEntry[], HTTP status code, HTTP response headers (array of strings)
     */
    public function simPerPageSortByQAndPageGetWithHttpInfo($page = null, $per_page = null, $q = null, $sort = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\SimEntry[]';
        $request = $this->simPerPageSortByQAndPageGetRequest($page, $per_page, $q, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\SimEntry[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation simPerPageSortByQAndPageGetAsync
     *
     * List SIMs
     *
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;imsi&#x60; * &#x60;msisdn&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60; * &#x60;eid&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;eid&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simPerPageSortByQAndPageGetAsync($page = null, $per_page = null, $q = null, $sort = null)
    {
        return $this->simPerPageSortByQAndPageGetAsyncWithHttpInfo($page, $per_page, $q, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation simPerPageSortByQAndPageGetAsyncWithHttpInfo
     *
     * List SIMs
     *
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;imsi&#x60; * &#x60;msisdn&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60; * &#x60;eid&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;eid&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simPerPageSortByQAndPageGetAsyncWithHttpInfo($page = null, $per_page = null, $q = null, $sort = null)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\SimEntry[]';
        $request = $this->simPerPageSortByQAndPageGetRequest($page, $per_page, $q, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'simPerPageSortByQAndPageGet'
     *
     * @param  int $page Current page number (optional)
     * @param  int $per_page Paging parameters defining the number of items per page (optional)
     * @param  string $q Filter parameter in &#x60;&lt;field&gt;:&lt;criteria&gt;&#x60; format. Expects a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;iccid_with_luhn&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;imsi&#x60; * &#x60;msisdn&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60; * &#x60;eid&#x60; (optional)
     * @param  string $sort Sort parameter in &#x60;&lt;operator&gt;&lt;field&gt;&#x60; format.  Sort properties according to a comma-separated list from the allowed fields:  * &#x60;id&#x60; * &#x60;issuer_org&#x60; * &#x60;reseller_org&#x60; * &#x60;customer_org&#x60; * &#x60;iccid&#x60; * &#x60;eid&#x60; * &#x60;status&#x60; * &#x60;production_date&#x60; * &#x60;endpoint&#x60; * &#x60;model&#x60;  If no sorting options are specified, the response will be sorted by &#x60;id&#x60;.  Supported operators: * &#x60;-&#x60;: Descending order * &#x60;+&#x60;: Ascending order  The response will be shown in ascending order if no operator is specified. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function simPerPageSortByQAndPageGetRequest($page = null, $per_page = null, $q = null, $sort = null)
    {

        $resourcePath = '/api/v1/sim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, 'int32');
        }
        // query params
        if ($per_page !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($per_page, 'int32');
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q, null);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation simStatsByIdGet
     *
     * SIM Usage and Cost Statistics
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\ResponseSchemaForSIMStatistics[]
     */
    public function simStatsByIdGet($sim_id)
    {
        list($response) = $this->simStatsByIdGetWithHttpInfo($sim_id);
        return $response;
    }

    /**
     * Operation simStatsByIdGetWithHttpInfo
     *
     * SIM Usage and Cost Statistics
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\ResponseSchemaForSIMStatistics[], HTTP status code, HTTP response headers (array of strings)
     */
    public function simStatsByIdGetWithHttpInfo($sim_id)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\ResponseSchemaForSIMStatistics[]';
        $request = $this->simStatsByIdGetRequest($sim_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\ResponseSchemaForSIMStatistics[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation simStatsByIdGetAsync
     *
     * SIM Usage and Cost Statistics
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simStatsByIdGetAsync($sim_id)
    {
        return $this->simStatsByIdGetAsyncWithHttpInfo($sim_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation simStatsByIdGetAsyncWithHttpInfo
     *
     * SIM Usage and Cost Statistics
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simStatsByIdGetAsyncWithHttpInfo($sim_id)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\ResponseSchemaForSIMStatistics[]';
        $request = $this->simStatsByIdGetRequest($sim_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'simStatsByIdGet'
     *
     * @param  int $sim_id Numeric ID of a SIM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function simStatsByIdGetRequest($sim_id)
    {
        // verify the required parameter 'sim_id' is set
        if ($sim_id === null || (is_array($sim_id) && count($sim_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sim_id when calling simStatsByIdGet'
            );
        }

        $resourcePath = '/api/v1/sim/{sim_id}/stats';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sim_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sim_id' . '}',
                ObjectSerializer::toPathValue($sim_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation simStatusGet
     *
     * List SIM Statuses
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\ListofAllAvailableSIMStatusesresponse[]
     */
    public function simStatusGet()
    {
        list($response) = $this->simStatusGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation simStatusGetWithHttpInfo
     *
     * List SIM Statuses
     *
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\ListofAllAvailableSIMStatusesresponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function simStatusGetWithHttpInfo()
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\ListofAllAvailableSIMStatusesresponse[]';
        $request = $this->simStatusGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\ListofAllAvailableSIMStatusesresponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation simStatusGetAsync
     *
     * List SIM Statuses
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simStatusGetAsync()
    {
        return $this->simStatusGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation simStatusGetAsyncWithHttpInfo
     *
     * List SIM Statuses
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function simStatusGetAsyncWithHttpInfo()
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\ListofAllAvailableSIMStatusesresponse[]';
        $request = $this->simStatusGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'simStatusGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function simStatusGetRequest()
    {

        $resourcePath = '/api/v1/sim/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateSIMBatchByBIC
     *
     * Validate if a given batch can be registered by BIC
     *
     * @param  string $bic The bic of the sim batch (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \CodericEcosystem\EmnifySdk\Model\ResponseOfActivatableSIMBatch
     */
    public function validateSIMBatchByBIC($bic)
    {
        list($response) = $this->validateSIMBatchByBICWithHttpInfo($bic);
        return $response;
    }

    /**
     * Operation validateSIMBatchByBICWithHttpInfo
     *
     * Validate if a given batch can be registered by BIC
     *
     * @param  string $bic The bic of the sim batch (required)
     *
     * @throws \CodericEcosystem\EmnifySdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \CodericEcosystem\EmnifySdk\Model\ResponseOfActivatableSIMBatch, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateSIMBatchByBICWithHttpInfo($bic)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\ResponseOfActivatableSIMBatch';
        $request = $this->validateSIMBatchByBICRequest($bic);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\CodericEcosystem\EmnifySdk\Model\ResponseOfActivatableSIMBatch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateSIMBatchByBICAsync
     *
     * Validate if a given batch can be registered by BIC
     *
     * @param  string $bic The bic of the sim batch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateSIMBatchByBICAsync($bic)
    {
        return $this->validateSIMBatchByBICAsyncWithHttpInfo($bic)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateSIMBatchByBICAsyncWithHttpInfo
     *
     * Validate if a given batch can be registered by BIC
     *
     * @param  string $bic The bic of the sim batch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateSIMBatchByBICAsyncWithHttpInfo($bic)
    {
        $returnType = '\CodericEcosystem\EmnifySdk\Model\ResponseOfActivatableSIMBatch';
        $request = $this->validateSIMBatchByBICRequest($bic);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateSIMBatchByBIC'
     *
     * @param  string $bic The bic of the sim batch (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateSIMBatchByBICRequest($bic)
    {
        // verify the required parameter 'bic' is set
        if ($bic === null || (is_array($bic) && count($bic) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bic when calling validateSIMBatchByBIC'
            );
        }

        $resourcePath = '/api/v1/sim_batch/bic/{bic}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($bic !== null) {
            $resourcePath = str_replace(
                '{' . 'bic' . '}',
                ObjectSerializer::toPathValue($bic),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

            // // this endpoint requires Bearer token
            if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
            }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
